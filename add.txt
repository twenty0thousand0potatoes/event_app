backend/src/app.controller.ts
import { Controller, Get, Res } from '@nestjs/common';
import { AppService } from './app.service';
import {Response} from 'express'

@Controller()
export class AppController {
  constructor(private readonly appService: AppService) {}

  @Get()
  getHomePage(@Res() res: Response) {
    res.redirect(301, 'http://localhost:3001');
  }
}
   

backend/src/app.module.ts
import { Module } from '@nestjs/common';
import { AppController } from './app.controller';
import { AppService } from './app.service';
import { AuthModule } from './auth/auth.module';
import { UsersModule } from './users/users.module';
import { ConfigModule } from '@nestjs/config';
import { TypeOrmModule } from '@nestjs/typeorm';
import { User } from './users/user.entity';
import { MailModule } from './mail/mail.module';
import { RedisModule as RedisMod } from '@nestjs-modules/ioredis';
import { RedisModule } from './redis/redis.module';
import { JwtAuthGuard } from './auth/guards/jwt-auth.guard';
import { Hobby } from './hobby/hobby.entity';
import { UserHobby } from './hobby/user-hobby.entity';
import { ServeStaticModule } from '@nestjs/serve-static';
import { join } from 'path';
import { HobbyModule } from './hobby/hobby.module';
import { Event } from './event/event.entity';
import { EventModule } from './event/event.module';
import { ModeratorModule } from './moderator/moderator.module';
import { EventPhoto } from './event/event-photo.entity';
import { EventSubscriber } from 'typeorm';
import { EventSubscription } from './event/event-subscription.entity';

@Module({
  imports: [
    AuthModule,
    UsersModule,
    ConfigModule.forRoot({
      isGlobal: true,
    }),
    TypeOrmModule.forRoot({
      type: "postgres",
      host: 'localhost',
      port: 5432,
      username: 'postgres',
      password: 'password',
      database: 'test_app',
      entities: [User, Event, Hobby, UserHobby, EventPhoto, EventSubscription],
      synchronize: true,
    }),
    RedisModule,
    MailModule,
    ServeStaticModule.forRoot({
      rootPath: join(__dirname, '..', 'uploads'),
      serveRoot: '/uploads',
    }),
    HobbyModule,
    EventModule,
    ModeratorModule,
  ],
  controllers: [AppController],
  providers: [AppService],
})
export class AppModule {}


backend/src/app.service.ts

import { Injectable } from '@nestjs/common';
import { join } from 'path';
import {Response} from 'express'

@Injectable()
export class AppService {
  sendIndexFile(res: Response): void {
    res.sendFile(join(__dirname, '..', 'public', 'index.html'));
  }
}

backend/src/main.ts


import { NestFactory } from '@nestjs/core';
import { AppModule } from './app.module';
import * as cookieParser from 'cookie-parser';


async function bootstrap() {
  const app = await NestFactory.create(AppModule);
  app.enableCors({
    origin: 'http://localhost:3001', 
    credentials: true, 
  });
  app.use(cookieParser());
  await app.listen(3000);
}
bootstrap();



backend/src/auth/auth.controller.ts
import { Body, Controller, Headers, HttpCode, Post, Res, UseGuards, UnauthorizedException, Req } from '@nestjs/common';
import { Response, Request } from 'express';
import { AuthCredentialsDto } from './dto/auth-credentials.dto';
import { AuthService } from './auth.service';


@Controller('auth')
export class AuthController {
  constructor(private authService: AuthService) {}


  @HttpCode(200)
  @Post('/signup')
  async signUp(
    @Body() authCredentialsDto: AuthCredentialsDto,
    @Res({ passthrough: true }) res: Response
  ): Promise<{ message: string }> {
    const { temporaryToken } = await this.authService.SignUp(authCredentialsDto);
    
    res.cookie('temp_token', temporaryToken, {
      httpOnly: true,
      secure: false, 
      sameSite: 'lax',
      maxAge: 5 * 60 * 1000, 
      domain: 'localhost'
    });
  
    return { message: 'Код подтверждения отправлен на email' };
  }

  @HttpCode(200)
  @Post('/signin')
  async signIn(
    @Body() authCredentialsDto: AuthCredentialsDto,
    @Res({ passthrough: true }) res: Response,
  ): Promise<{ message: string }> {
    try {
      const accessToken = await this.authService.SignIn(authCredentialsDto);

      res.cookie('access_token', accessToken, {  
        httpOnly: true,
        secure: false, // true в проде (HTTPS)
        sameSite: 'lax',
        maxAge: 7 * 24 * 60 * 60 * 1000, 
        domain: 'localhost', 
      });

      return { message: 'Login successful' };
    } catch (error) {
      throw new UnauthorizedException(error.message);
    }
  }

  @Post('logout')
  @HttpCode(200)
  async logout(@Res({ passthrough: true }) res: Response) {
    res.clearCookie('access_token',{ 
      httpOnly: true,
      secure: false, // true в проде (HTTPS)
      sameSite: 'lax',
      maxAge: 7 * 24 * 60 * 60 * 1000, 
      domain: 'localhost', 
    });
    
    return { message: 'Logged out successfully' };
  }


  @Post('/verify')
  async verifyEmail(
    @Body('code') code: string,
    @Req() req: Request,
    @Res({ passthrough: true }) res: Response
  ): Promise<{ message: string }> {
    const temporaryToken = req.cookies.temp_token;

    if (!temporaryToken) {
      throw new UnauthorizedException('Сессия истекла');
    }
  
    const accessToken  = await this.authService.verifyEmail(code, temporaryToken);
    
    res.clearCookie('temp_token');
    res.cookie('access_token', accessToken, {
      httpOnly: true,
      secure: false,
      sameSite: 'lax',
      maxAge: 7 * 24 * 60 * 60 * 1000,
      domain: 'localhost'
    });
  
    return { message: 'Email успешно подтвержден' };
  }

  @Post('/resend-code')
  async resendCode(@Req() req: Request) {
    const cookie = req.cookies?.temp_token; 

    if (!cookie) {
      throw new UnauthorizedException('Нет токена в cookies');
    }
  
    return await this.authService.resendVerificationCode(cookie);
  }

  @Post('/request-password-reset')
async requestPasswordReset(
  @Body('email') email: string,
  @Res({ passthrough: true }) res: Response
) {
  const { code, tempToken } = await this.authService.generateResetCode(email);

  res.cookie('reset_token', tempToken, {
    httpOnly: true,
    sameSite: 'lax',
    maxAge: 5 * 60 * 1000,
    domain: 'localhost',
  });

  return { message: 'Код сброса отправлен на email' };
}

@Post('/verify-reset-code')
async verifyResetCode(
  @Body('code') code: string,
  @Req() req: Request,
  @Res({ passthrough: true }) res: Response,
) {
  const token = req.cookies.reset_token;
  const { verifiedToken } = await this.authService.checkResetCode(token, code);

  res.cookie('reset_verified_token', verifiedToken, {
    httpOnly: true,
    sameSite: 'lax',
    maxAge: 5 * 60 * 1000,
    domain: 'localhost',
  });

  return { message: 'Код подтвержден' };
}

@Post('/reset-password')
async resetPassword(
  @Body('password') password: string,
  @Req() req: Request,
) {
  const token = req.cookies.reset_verified_token;
  await this.authService.updatePasswordWithToken(token, password);
  return { message: 'Пароль успешно изменен' };
}

}

backend/src/auth/auth.module.ts
import { Module } from '@nestjs/common';
import { AuthService } from './auth.service';
import { AuthController } from './auth.controller';
import { PassportModule } from '@nestjs/passport';
import { JwtModule } from '@nestjs/jwt';
import { ConfigModule, ConfigService } from '@nestjs/config';
import { UsersModule } from 'src/users/users.module';
import { MailModule } from 'src/mail/mail.module';
import { JwtStrategy } from 'src/strategies/jwt.strategies';
import { JwtAuthGuard } from './guards/jwt-auth.guard';



@Module({
  imports:[UsersModule, MailModule,ConfigModule,PassportModule.register({defaultStrategy:'jwt'}), JwtModule.registerAsync({
imports:[ConfigModule],
inject:[ConfigService],
useFactory: async (configService: ConfigService) => ({
  secret: configService.get<string>('secretKey'), 
  signOptions: { expiresIn: '7d' },
}),
  })],
  providers: [AuthService, JwtStrategy, JwtAuthGuard],
  controllers: [AuthController],
  exports:[JwtAuthGuard]
})
export class AuthModule {}


backend/src/auth/auth.service.ts

import {
  ConflictException,
  Injectable,
  UnauthorizedException,
} from '@nestjs/common';
import { JwtService } from '@nestjs/jwt';
import { UsersService } from 'src/users/users.service';
import { AuthCredentialsDto } from './dto/auth-credentials.dto';
import { RedisService } from 'src/redis/redis.service';
import { MailService } from 'src/mail/mail.service'; 

@Injectable()
export class AuthService {
  constructor(
    private usersService: UsersService,
    private jwtService: JwtService,
    private redisService: RedisService,
    private mailService: MailService, 
  ) {}

  async SignUp(authCredentialsDto: AuthCredentialsDto): Promise<{ temporaryToken: string }> {
    const { email, password } = authCredentialsDto;
  
    if (await this.usersService.findByEmail(email)) {
      throw new ConflictException('Этот email уже зарегистрирован!');
    }
  
    const verificationCode = Math.floor(100000 + Math.random() * 900000).toString();
  
    await this.redisService.setWithTTL(
      `verification:${email}`,
      JSON.stringify({ email, password, verificationCode, attempts: 0 }),
      300,
    );
  
    await this.mailService.sendEmail(
      email,
      'Подтверждение регистрации',
      `Ваш код подтверждения: ${verificationCode}`,
      `<h1>Ваш код: ${verificationCode}</h1>`,
    );
  
    const temporaryToken = this.jwtService.sign({ email }, { expiresIn: '5m' }); 
  
    return { temporaryToken };
  }

  async SignIn(authCredentialsDto: AuthCredentialsDto): Promise<{ accessToken: string }> {
    const { email, password } = authCredentialsDto;
    const user = await this.usersService.validateUser(email, password);

    if (!user) {
      throw new UnauthorizedException('Неверные учетные данные!');
    }

    const payload = { username: user.username, sub: user.id, role: user.role };
    const accessToken = this.jwtService.sign(payload);
    return { accessToken };
  }


  async verifyEmail(code: string, temporaryToken: string): Promise<{ accessToken: string }> {
    try {
      const { email } = this.jwtService.verify(temporaryToken);
    
      const redisData = await this.redisService.get(`verification:${email}`);
      if (!redisData) {
        throw new Error('Код подтверждения истек');
      }
      const { verificationCode, password, attempts } = JSON.parse(redisData);
      
      if (attempts >= 3) {
        throw new Error('Превышено количество попыток');
      }
  
      if (code !== verificationCode) {
        await this.redisService.setWithTTL(
          `verification:${email}`,
          JSON.stringify({ ...JSON.parse(redisData), attempts: attempts + 1 }),
          300
        );
        throw new Error('Неверный код подтверждения');
      }
  
      const user = await this.usersService.createUser( email, password );
      
      const accessToken = this.jwtService.sign({ 
        sub: user.id,
        email: user.email, 
        role: user.role
      });
  
      await this.redisService.delete(`verification:${email}`);
  
      return { accessToken };
    } catch (error) {
      throw new UnauthorizedException(error.message);
    }
  }

  async resendVerificationCode(temporaryToken: string): Promise<void> {
    let email: string;
  
    try {
      const decoded = this.jwtService.verify(temporaryToken);
      email = decoded.email;
    } catch (err) {
      throw new UnauthorizedException('Неверный или истёкший токен.');
    }
  
    const storedData = await this.redisService.get(`verification:${email}`);
    if (!storedData) {
      throw new UnauthorizedException('Верификация не найдена или истекла.');
    }
  
    const parsedData = JSON.parse(storedData);
  
    const newCode = Math.floor(100000 + Math.random() * 900000).toString();
  
    await this.redisService.setWithTTL(
      `verification:${email}`,
      JSON.stringify({ ...parsedData, verificationCode: newCode, attempts: 0 }),
      300,
    );

    await this.mailService.sendEmail(
      email,
      'Повторная отправка кода подтверждения',
      `Ваш новый код подтверждения: ${newCode}`,
      `<h1>Ваш новый код: ${newCode}</h1>`,
    );
  }

  async generateResetCode(email: string): Promise<{ code: string, tempToken: string }> {
    const user = await this.usersService.findByEmail(email);
    if (!user) throw new UnauthorizedException('Пользователь не найден');
  
    const resetCode = Math.floor(100000 + Math.random() * 900000).toString();
  
    await this.redisService.setWithTTL(
      `reset:${email}`,
      JSON.stringify({ email, code: resetCode, attempts: 0 }),
      300,
    );
  
    await this.mailService.sendEmail(
      email,
      'Сброс пароля',
      `Ваш код для сброса пароля: ${resetCode}`,
      `<h1>Код сброса: ${resetCode}</h1>`
    );
  
    const tempToken = this.jwtService.sign({ email }, { expiresIn: '5m' });
    return { code: resetCode, tempToken };
  }
  
  async checkResetCode(token: string, code: string): Promise<{ verifiedToken: string }> {
    if (!token) throw new UnauthorizedException('Токен сброса отсутствует или истек');
  
    const { email } = this.jwtService.verify(token);
    const redisData = await this.redisService.get(`reset:${email}`);
    if (!redisData) throw new UnauthorizedException('Истек код');
  
    const parsedData = JSON.parse(redisData);
    if (parsedData.attempts >= 3) throw new UnauthorizedException('Превышено число попыток');
  
    if (code !== parsedData.code) {
      await this.redisService.setWithTTL(
        `reset:${email}`,
        JSON.stringify({ ...parsedData, attempts: parsedData.attempts + 1 }),
        300
      );
      throw new UnauthorizedException('Неверный код');
    }
  
    await this.redisService.delete(`reset:${email}`);
    const verifiedToken = this.jwtService.sign({ email, verified: true }, { expiresIn: '5m' });
  
    return { verifiedToken };
  }
  
  async updatePasswordWithToken(token: string, password: string): Promise<void> {
    if (!token) throw new UnauthorizedException('Сессия сброса недействительна');
  
    const { email, verified } = this.jwtService.verify(token);
    if (!verified) throw new UnauthorizedException('Не подтверждено');
  
    await this.usersService.updatePassword(email, password);
  }
  
  
}


backend/src/auth/roles.decorator.ts


import { SetMetadata } from '@nestjs/common';
import { Roles as Role } from './roles.enum';

export const ROLES_KEY = 'roles';
export const Roles = (...roles: Role[]) => SetMetadata(ROLES_KEY, roles);

backend/src/auth/roles.enum.ts

export enum Roles {
    USER = 'user',
    ADMIN = 'admin',
    MODERATOR = 'moderator'
}

backend/src/auth/roles.guard.ts

import { Injectable, CanActivate, ExecutionContext, ForbiddenException } from '@nestjs/common';
import { Reflector } from '@nestjs/core';
import { Roles } from './roles.enum';
import { ROLES_KEY } from './roles.decorator';

@Injectable()
export class RolesGuard implements CanActivate {
  constructor(private reflector: Reflector) {}

  canActivate(context: ExecutionContext): boolean {
    const requiredRoles = this.reflector.getAllAndOverride<Roles[]>(ROLES_KEY, [
      context.getHandler(),
      context.getClass(),
    ]);

    if (!requiredRoles) {
      return true;
    }
    const request = context.switchToHttp().getRequest();
    const user = request.user;

    if (!user || !user.role) {
      throw new ForbiddenException('Доступ запрещен: отсутствуют данные пользователя');
    }
    
    const hasRole = requiredRoles.some((role) => user.role === role);
    
    if (!hasRole) {
      throw new ForbiddenException(
        `Доступ запрещен: требуется одна из ролей [${requiredRoles.join(', ')}]`,
      );
    }

    return true;
  }
}

backend/src/auth/dto/add-hobby.dto.ts

export class AddHobbyDto {
    hobbyNames: string[];
  }

backend/src/auth/dto/auth-credentials.dto.ts


import { IsEmail, IsString, maxLength, MaxLength, MinLength } from "class-validator";


export class AuthCredentialsDto{

    @IsString()
    @MinLength(4)
    @MaxLength(20)
    @IsEmail()
    email:string

    @MinLength(6)
    @MaxLength(30)
    @IsString()
    password:string


}
backend/src/auth/dto/create-event.dto.ts

export class CreateEventDto {
  title: string;
  description?: string;
  date: Date;
  maxParticipants?: number;
  type?: string;
  price?: number;
  imageUrl?: string;
  latitude?: number;
  longitude?: number;
  photos?: string[];
}


backend/src/auth/dto/update-age.dto.ts

import { IsInt, Min, Max } from 'class-validator';

export class UpdateAgeDto {
  @IsInt()
  @Min(0)
  @Max(150)
  age: number;
}


backend/src/auth/dto/update-avatar.dto.ts


import { IsString, IsUrl, IsOptional } from 'class-validator';

export class UpdateAvatarDto {
  @IsOptional()
  @IsUrl()
  avatar?: string; 

}
backend/src/auth/dto/update-city.dto.ts
import { IsString, Length } from 'class-validator';

export class UpdateCityDto {
  @IsString()
  @Length(1, 100)
  city: string;
}


backend/src/auth/dto/update-description.dto.ts

import { IsString, IsOptional, MaxLength } from 'class-validator';

export class UpdateDescriptionDto {
  @IsOptional()
  @IsString()
  @MaxLength(500)
  description?: string;
}


backend/src/auth/dto/update-event.dto.ts

export class UpdateEventDto {
  title?: string;
  description?: string;
  date?: Date;
  maxParticipants?: number;
  type?: string;
  price?: number;
  imageUrl?: string;
  latitude?: number;
  longitude?: number;
  photos?: string[];
}


backend/src/auth/dto/update-username.dto.ts

import { IsString, MinLength } from 'class-validator'

export class UpdateUsernameDto {
  @IsString()
  @MinLength(2)
  username: string
}


backend/src/auth/guards/jwt-auth.guard.ts
import {
  Injectable,
  CanActivate,
  ExecutionContext,
  UnauthorizedException,
} from '@nestjs/common';
import { JwtService } from '@nestjs/jwt';
import { Request } from 'express';

@Injectable()
export class JwtAuthGuard implements CanActivate {
  constructor(private jwtService: JwtService) {}

  async canActivate(context: ExecutionContext): Promise<boolean> {
    const request = context.switchToHttp().getRequest<Request>();
    const token = this.extractTokenFromCookie(request);

    if (!token) {
      throw new UnauthorizedException('Требуется авторизация');
    }

    try {
      const payload = await this.jwtService.verifyAsync(token, {
        secret: process.env.secretKey || 'your-secret-key',
      });

      request['user'] = payload;
    } catch (err) {
      throw new UnauthorizedException('Недействительный токен');
    }

    return true;
  }

  private extractTokenFromCookie(request: Request): string | undefined {

    if (request.cookies?.access_token.access_token == undefined) {
      return request.cookies?.access_token.accessToken;
    } 
      return request.cookies?.access_token;
    
  }
}


backend/src/event/event-photo.entity.ts
import { Entity, PrimaryGeneratedColumn, Column, ManyToOne } from 'typeorm';
import { Event } from './event.entity';

@Entity()
export class EventPhoto {
  @PrimaryGeneratedColumn()
  id: number;

  @Column({ type: 'varchar', length: 255 })
  url: string;

  @ManyToOne(() => Event, event => event.photos, { onDelete: 'CASCADE' })
  event: Event;
}


backend/src/event/event-subscription.entity.ts

import { Entity, PrimaryGeneratedColumn, ManyToOne, CreateDateColumn, Unique } from 'typeorm';
import { User } from '../users/user.entity';
import { Event } from './event.entity';

@Entity()
@Unique(['user', 'event'])
export class EventSubscription {
  @PrimaryGeneratedColumn()
  id: number;

  @ManyToOne(() => User, user => user.eventSubscriptions, { eager: true })
  user: User;

  @ManyToOne(() => Event, event => event.subscriptions, { eager: true })
  event: Event;

  @CreateDateColumn()
  createdAt: Date;
}


backend/src/event/event.controller.ts

import { Controller, Get, Query, Post, Body, UseGuards, Req, Param, UseInterceptors, UploadedFile, UploadedFiles, Put, ForbiddenException, NotFoundException } from '@nestjs/common';
import { EventService } from './event.service';
import { Event } from './event.entity';
import { JwtAuthGuard } from '../auth/guards/jwt-auth.guard';
import { RolesGuard } from '../auth/roles.guard';
import { Roles } from '../auth/roles.decorator';
import { Roles as Role } from '../auth/roles.enum';
import { Request } from 'express';
import { FilesInterceptor, FileInterceptor } from '@nestjs/platform-express';
import { diskStorage } from 'multer';
import { extname } from 'path';
import { CreateEventDto } from '../auth/dto/create-event.dto';
import { UpdateEventDto } from '../auth/dto/update-event.dto';
import { User } from 'src/users/user.entity';
import { ignoreElements } from 'rxjs';


@Controller('events')
export class EventController {
  constructor(private readonly eventService: EventService) {}

  @Get()
  async getEvents(
    @Query('type') type?: string, 
    @Query('minPrice') minPrice?: string,
    @Query('maxPrice') maxPrice?: string,
    @Query('sortBy') sortBy?: 'date' | 'price',
    @Query('sortOrder') sortOrder?: 'asc' | 'desc',
  ): Promise<Event[]> {
    const filters = {
      type,
      minPrice: minPrice ? parseFloat(minPrice) : undefined,
      maxPrice: maxPrice ? parseFloat(maxPrice) : undefined,
      sortBy,
      sortOrder,
    };
    return this.eventService.findEvents(filters);
  }

  @Get('mine')
  @UseGuards(JwtAuthGuard)
  async getMyEvents(@Req() req: Request): Promise<{ createdEvents: Event[]; subscribedEvents: Event[] }> {
    const user = req.user as any;
    const createdEvents = await this.eventService.getEventsCreatedByUser(user.sub);
    const subscribedEvents = await this.eventService.getEventsSubscribedByUser(user.sub);
    return { createdEvents, subscribedEvents };
  }

  @Get(':id')
  async getEventById(@Param('id') id: string): Promise<Event> {
    return this.eventService.getEventById(Number(id));
  }

  @Post(':id/subscribe')
  @UseGuards(JwtAuthGuard, RolesGuard)
  @Roles(Role.USER, Role.ADMIN, Role.MODERATOR)
  async subscribeToEvent(@Param('id') id: string, @Req() req: Request) {
    const user = req.user as any;
    return this.eventService.subscribeToEvent(user.sub, Number(id));
  }

  @Put(':id')
  @UseGuards(JwtAuthGuard, RolesGuard)
  @Roles(Role.USER, Role.ADMIN, Role.MODERATOR)
  async updateEvent(
    @Param('id') id: string,
    @Body() updateEventDto: UpdateEventDto,
    @Req() req: Request,
  ): Promise<Event> {
    const user = req.user as any;
    const event = await this.eventService.getEventById(Number(id));
    if (!event) {
      throw new NotFoundException('Мероприятие не найдено');
    }

    if (event.creator.id !== user.sub) {
      throw new ForbiddenException('Нет прав на редактирование этого мероприятия');
    }
    return this.eventService.updateEvent(Number(id), updateEventDto);
  }

  @Post('upload')
  @UseGuards(JwtAuthGuard, RolesGuard)
  @Roles(Role.USER, Role.ADMIN, Role.MODERATOR)
  @UseInterceptors(
    FileInterceptor('file', {
      storage: diskStorage({
        destination: './uploads',
        filename: (req, file, cb) => {
          const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1e9);
          const ext = extname(file.originalname);
          cb(null, `${file.fieldname}-${uniqueSuffix}${ext}`);
        },
      }),
      fileFilter: (req, file, cb) => {
        if (!file.mimetype.match(/\/(jpg|jpeg|png|gif)$/)) {
          return cb(new Error('Only image files are allowed!'), false);
        }
        cb(null, true);
      },
    }),
  )
  async uploadPhoto(
    @UploadedFile() file: Express.Multer.File,
    @Req() req: Request,
  ): Promise<{ url: string }> {
    return { url: `/uploads/${file.filename}` };
  }

  @Post()
  @UseGuards(JwtAuthGuard, RolesGuard)
  @Roles(Role.USER, Role.ADMIN, Role.MODERATOR)
  async createEvent(
    @Body() eventData: CreateEventDto,
    @Req() req: Request,
  ): Promise<Event> {
    const user = req.user;
    return this.eventService.createEvent(eventData, user);
  }

  @Get('all')
  async getAllEventsWithCreators(): Promise<Event[]> {
    return this.eventService.getAllEventsWithCreators();
  }
}


backend/src/event/event.entity.ts

import { Entity, PrimaryGeneratedColumn, Column, ManyToOne, OneToMany, CreateDateColumn, UpdateDateColumn } from 'typeorm';
import { User } from '../users/user.entity';
import { EventPhoto } from './event-photo.entity';
import { EventSubscription } from './event-subscription.entity';

@Entity()
export class Event {
  @PrimaryGeneratedColumn()
  id: number;

  @Column()
  title: string;

  @Column({ type: 'text', nullable: true })
  description: string;

  @Column({ type: 'timestamp' })
  date: Date;
 
  @Column({ type: 'int', default: 50 })
  maxParticipants: number;

  @Column({ type: 'varchar', length: 50, default: 'regular' })
  type: string;

  @Column({ type: 'float', default: 0 })
  price: number;

  @Column({ type: 'varchar', length: 255, nullable: true })
  mainPhotoUrl?: string;

  @Column({ type: 'float', nullable: true })
  latitude?: number;

  @Column({ type: 'float', nullable: true })
  longitude?: number;

  @ManyToOne(() => User, user => user.events, { eager: true })
  creator: User;

  @OneToMany(() => EventPhoto, photo => photo.event, { cascade: true, eager: true })
  photos: EventPhoto[];

  @OneToMany(() => EventSubscription, subscription => subscription.event)
  subscriptions: EventSubscription[];

  @CreateDateColumn()
  createdAt: Date;

  @UpdateDateColumn()
  updatedAt: Date;
}

backend/src/event/event.module.ts
import { Module } from '@nestjs/common';
import { EventService } from './event.service';
import { EventController } from './event.controller';
import { TypeOrmModule } from '@nestjs/typeorm';
import { JwtModule } from '@nestjs/jwt';
import { Event } from './event.entity';

@Module({
  imports: [TypeOrmModule.forFeature([Event]), JwtModule],
  providers: [EventService],
  controllers: [EventController]
})
export class EventModule {}
  


backend/src/event/event.service.ts
import { Injectable, ForbiddenException, NotFoundException, ConflictException } from '@nestjs/common';
import { DataSource, SelectQueryBuilder } from 'typeorm';
import { Event } from './event.entity';
import { EventPhoto } from './event-photo.entity';
import { CreateEventDto } from '../auth/dto/create-event.dto';
import { UpdateEventDto } from 'src/auth/dto/update-event.dto';
import { EventSubscription } from './event-subscription.entity';

interface EventFilters {
  type?: string;
  minPrice?: number;
  maxPrice?: number;
  sortBy?: 'date' | 'price';
  sortOrder?: 'asc' | 'desc';
}
interface EventFilters {
  type?: string;
  minPrice?: number;
  maxPrice?: number;
  sortBy?: 'date' | 'price';
  sortOrder?: 'asc' | 'desc';
}

@Injectable()
export class EventService {
  constructor(
    private dataSource: DataSource,
  ) {}

  async findEvents(filters: EventFilters): Promise<Event[]> {
    const eventRepository = this.dataSource.getRepository(Event);
    let query: SelectQueryBuilder<Event> = eventRepository.createQueryBuilder('event');

    query = query.leftJoinAndSelect('event.creator', 'creator');

    if (filters.type) {
      query = query.andWhere('event.type = :type', { type: filters.type });
    }
    if (filters.minPrice !== undefined) {
      query = query.andWhere('event.price >= :minPrice', { minPrice: filters.minPrice });
    }
    if (filters.maxPrice !== undefined) {
      query = query.andWhere('event.price <= :maxPrice', { maxPrice: filters.maxPrice });
    }
    if (filters.sortBy) {
      const order = filters.sortOrder === 'desc' ? 'DESC' : 'ASC';
      query = query.orderBy(`event.${filters.sortBy}`, order);
    }

    return query.getMany();
  }

  async getEventsCreatedByUser(userId: number): Promise<Event[]> {
    const eventRepository = this.dataSource.getRepository(Event);
    return eventRepository
      .createQueryBuilder('event')
      .leftJoinAndSelect('event.creator', 'creator')
      .leftJoinAndSelect('event.photos', 'photos')
      .where('creator.id = :userId', { userId })
      .getMany();
  }

  async getEventsSubscribedByUser(userId: number): Promise<Event[]> {
    const eventSubscriptionRepository = this.dataSource.getRepository(EventSubscription);
    const subscriptions = await eventSubscriptionRepository.find({
      where: { user: { id: userId } },
      relations: ['event', 'event.creator', 'event.photos'],
    });
    return subscriptions.map(sub => sub.event);
  }

  async getEventById(id: number): Promise<Event> {
    const eventRepository = this.dataSource.getRepository(Event);
    const event = await eventRepository
      .createQueryBuilder('event')
      .leftJoinAndSelect('event.creator', 'creator')
      .leftJoinAndSelect('event.photos', 'photos')
      .leftJoinAndSelect('event.subscriptions', 'subscriptions')
      .where('event.id = :id', { id })
      .getOne();

    if (!event) {
      throw new NotFoundException('Мероприятие не найдено');
    }

    return event;
  }

  async subscribeToEvent(userId: number, eventId: number): Promise<EventSubscription> {
    const eventRepository = this.dataSource.getRepository(Event);
    const subscriptionRepository = this.dataSource.getRepository(EventSubscription);
    const userRepository = this.dataSource.getRepository('User');

    const event = await eventRepository.findOne({
      where: { id: eventId },
      relations: ['subscriptions'],
    });

    if (!event) {
      throw new NotFoundException('Мероприятие не найдено');
    }

    const user = await userRepository.findOneBy({ id: userId });
    if (!user) {
      throw new NotFoundException('Пользователь не найден');
    }

    const existingSubscription = await subscriptionRepository.findOne({
      where: { user: { id: userId }, event: { id: eventId } },
    });
    if (existingSubscription) {
      throw new ConflictException('Вы уже подписаны на это мероприятие');
    }

    if (event.subscriptions.length >= event.maxParticipants) {
      throw new ForbiddenException('Свободных мест нет');
    }

    const subscription = subscriptionRepository.create({
      user,
      event,
    });

    return subscriptionRepository.save(subscription);
  }

  async updateEvent(id: number, updateEventDto: UpdateEventDto): Promise<Event> {
    const eventRepository = this.dataSource.getRepository(Event);
    const eventPhotoRepository = this.dataSource.getRepository(EventPhoto);
    const queryRunner = this.dataSource.createQueryRunner();

    await queryRunner.connect();
    await queryRunner.startTransaction();

    try {
      const event = await queryRunner.manager.getRepository(Event).findOne({
        where: { id },
        relations: ['photos'],
      });

      if (!event) {
        throw new NotFoundException('Мероприятие не найдено');
      }

      const { photos, ...eventData } = updateEventDto;
      Object.assign(event, eventData);

      if (photos) {
        if (event.photos && event.photos.length > 0) {
          await queryRunner.manager.getRepository(EventPhoto).remove(event.photos);
        }
        const photoEntities = photos.map(url => {
          const photo = new EventPhoto();
          photo.url = url;
          photo.event = event;
          return photo;
        });
        await queryRunner.manager.getRepository(EventPhoto).save(photoEntities);


        if (photos.length > 0) {
          event.mainPhotoUrl = photos[0];
        } else {
          event.mainPhotoUrl = null;
        }
      }

      const savedEvent = await queryRunner.manager.getRepository(Event).save(event);

      await queryRunner.commitTransaction();

      return savedEvent;
    } catch (error) {
      await queryRunner.rollbackTransaction();
      throw error;
    } finally {
      await queryRunner.release();
    }
  }

  async createEvent(eventData: CreateEventDto, user: any): Promise<Event> {
    const maxPhotos = (user.role === 'organizer' || user.isPlusSubscriber) ? 7 : 3;
    const { photos = [], imageUrl, ...eventDataWithoutPhotos } = eventData;

    if (user.role === 'user') {
      if (!user.isPlusSubscriber) {
        if (eventData.type === 'premium') {
          throw new ForbiddenException('Мероприятия типа "Премиум" доступны только для пользователей с подпиской Plus');
        }
        if (eventData.price && eventData.price > 0) {
          throw new ForbiddenException('Платные мероприятия доступны только для пользователей с подпиской Plus');
        }
      }
      if (eventData.maxParticipants && eventData.maxParticipants > 50) {
        throw new ForbiddenException('Обычные пользователи не могут создавать мероприятия с более чем 50 участниками');
      }
    }

    if (photos.length > maxPhotos) {
      throw new ForbiddenException(`Максимальное количество фото для вашего типа пользователя: ${maxPhotos}`);
    }

    const queryRunner = this.dataSource.createQueryRunner();

    await queryRunner.connect();
    await queryRunner.startTransaction();

    try {
      const eventRepository = queryRunner.manager.getRepository(Event);
      const eventPhotoRepository = queryRunner.manager.getRepository(EventPhoto);

      const event = eventRepository.create({
        ...eventDataWithoutPhotos,
        creator: { id: user.sub },
        latitude: eventData.latitude,
        longitude: eventData.longitude,
      });

      const savedEvent = await eventRepository.save(event);

      if (photos.length > 0) {
        const photoEntities = photos.map(url => {
          const photo = new EventPhoto();
          photo.url = url;
          photo.event = savedEvent;
          return photo;
        });
        await eventPhotoRepository.save(photoEntities);

        if (!savedEvent.mainPhotoUrl) {
          savedEvent.mainPhotoUrl = photos[0];
          await eventRepository.save(savedEvent);
        }
      }

      await queryRunner.commitTransaction();

      const eventWithPhotos = await eventRepository.findOne({
        where: { id: savedEvent.id },
        relations: ['creator', 'photos'],
      });

      if (!eventWithPhotos) {
        throw new NotFoundException('Мероприятие не найдено');
      }

      return eventWithPhotos;
    } catch (error) {
      await queryRunner.rollbackTransaction();
      throw error;
    } finally {
      await queryRunner.release();
    }
  }


  async getAllEventsWithCreators(): Promise<Event[]> {
    const eventRepository = this.dataSource.getRepository(Event);
    return eventRepository
      .createQueryBuilder('event')
      .leftJoinAndSelect('event.creator', 'creator')
      .leftJoinAndSelect('event.photos', 'photos')
      .getMany();
  }
}



backend/src/hobby/hobby.controller.ts

import { Controller, Get, Param, ParseIntPipe, UseGuards } from '@nestjs/common'
import { HobbyService } from './hobby.service'
import { JwtAuthGuard } from 'src/auth/guards/jwt-auth.guard'

@Controller('hobbies')
@UseGuards(JwtAuthGuard) 
export class HobbyController {
  constructor(private readonly hobbiesService: HobbyService) {}

  @Get()
  findAll() {
    return this.hobbiesService.findAll()
  }

  @Get(':id')
  findOne(@Param('id', ParseIntPipe) id: number) {
    return this.hobbiesService.findOne(id)
  }
}

backend/src/hobby/hobby.entity.ts

import { Entity, PrimaryGeneratedColumn, Column, OneToMany } from 'typeorm';
import { UserHobby } from './user-hobby.entity';

@Entity()
export class Hobby {
  @PrimaryGeneratedColumn()
  id: number;

  @Column({ unique: true })
  name: string;

  @OneToMany(() => UserHobby, userHobby => userHobby.hobby)
  userConnections: UserHobby[];
}
backend/src/hobby/hobby.module.ts
import { Module } from '@nestjs/common'
import { TypeOrmModule } from '@nestjs/typeorm'
import { Hobby } from './hobby.entity'
import { HobbyService } from './hobby.service'
import { HobbyController } from './hobby.controller'
import { JwtModule } from '@nestjs/jwt'

@Module({
  imports: [TypeOrmModule.forFeature([Hobby]), JwtModule],
  controllers: [HobbyController],
  providers: [HobbyService],
  exports: [HobbyService],
})
export class HobbyModule {}


backend/src/hobby/hobby.service.ts
import { Injectable, NotFoundException } from '@nestjs/common'
import { InjectRepository } from '@nestjs/typeorm'
import { Repository } from 'typeorm'
import { Hobby } from './hobby.entity'

@Injectable()
export class HobbyService {
  constructor(
    @InjectRepository(Hobby)
    private hobbyRepository: Repository<Hobby>
  ) {}

  findAll(): Promise<Hobby[]> {
    return this.hobbyRepository.find()
  }

  async findOne(id: number): Promise<Hobby> {
    const hobby = await this.hobbyRepository.findOne({ where: { id } })
    if (!hobby) {
      throw new NotFoundException(`Хобби с id=${id} не найдено`)
    }
    return hobby
  }
}

backend/src/hobby/user-hobby.entity.ts

import { Entity, PrimaryGeneratedColumn, ManyToOne, Index, CreateDateColumn, Column } from 'typeorm';
import { User } from '../users/user.entity';
import { Hobby } from './hobby.entity';

@Entity()
@Index(['userId', 'hobbyId'], { unique: true }) 
export class UserHobby {
  @PrimaryGeneratedColumn()
  id: number;

  @Column()
  userId: number;

  @Column()
  hobbyId: number;

  @ManyToOne(() => User, user => user.hobbies)
  user: User;

  @ManyToOne(() => Hobby, hobby => hobby.userConnections)
  hobby: Hobby;

  @CreateDateColumn()
  createdAt: Date;

  @Column({ nullable: true })
  level?: string; 
}

backend/src/mail/mail.module.ts

import { Module } from '@nestjs/common';
import { MailerModule } from '@nestjs-modules/mailer';
import { MailService } from './mail.service';
import { ConfigModule, ConfigService } from '@nestjs/config';

@Module({
    imports:[
        ConfigModule.forRoot(),
        MailerModule.forRootAsync({
            imports: [ConfigModule],
            inject: [ConfigService],
            useFactory: (config: ConfigService) => ({
              transport: {
                host: config.get<string>('MAIL_HOST'),
                port: config.get<number>('MAIL_PORT'),
                secure: config.get<boolean>('MAIL_SECURE'), 
                auth: {
                  user: config.get<string>('MAIL_USER'),
                  pass: config.get<string>('MAIL_PASS'),
                },
              },
              defaults: {
                from: config.get<string>('MAIL_FROM'),
              },
            }),
          }),
    ],
    providers: [MailService],
    exports:[MailService]
})
export class MailModule {}



backend/src/mail/mail.service.ts
import { Injectable } from '@nestjs/common';
import { MailerService } from '@nestjs-modules/mailer';

@Injectable()
export class MailService {
    constructor (private readonly mailerService:MailerService){}

    async sendEmail(to: string, subject: string, text: string, html?: string) {
        try {
          const info = await this.mailerService.sendMail({
            to,
            subject,
            text,
            html,
          });

          return info;
        } catch (error) {
          console.error('❌ Error sending email:', error); 
          throw error;
        }
      }
}


backend/src/moderator/moderator.controller.ts

import { Controller, Get, Query, UseGuards } from '@nestjs/common';
import { ModeratorService } from './moderator.service';
import { JwtAuthGuard } from '../auth/guards/jwt-auth.guard';
import { RolesGuard } from 'src/auth/roles.guard'
import { Roles } from 'src/auth/roles.decorator'
import { Roles as Role } from '../auth/roles.enum'

@Controller('moderator')
@UseGuards(JwtAuthGuard)
@UseGuards(RolesGuard)
@Roles(Role.MODERATOR)
export class ModeratorController {
  constructor(private readonly moderatorService: ModeratorService) {}

  @Get('users')
  async getUsers(
    @Query('search') search?: string,
    @Query('city') city?: string,
    @Query('role') role?: string,
    @Query('sortBy') sortBy?: string,
    @Query('sortOrder') sortOrder?: 'asc' | 'desc',
    @Query('page') page?: number,
    @Query('limit') limit?: number,
  ) {
    return this.moderatorService.getUsers({
      search,
      city,
      role,
      sortBy,
      sortOrder,
      page: page ? Number(page) : undefined,
      limit: limit ? Number(limit) : undefined,
    });
  }

  @Get('events')
  async getEvents(
    @Query('search') search?: string,
    @Query('type') type?: string,
    @Query('dateFrom') dateFrom?: string,
    @Query('dateTo') dateTo?: string,
    @Query('sortBy') sortBy?: string,
    @Query('sortOrder') sortOrder?: 'asc' | 'desc',
    @Query('page') page?: number,
    @Query('limit') limit?: number,
  ) {
    return this.moderatorService.getEvents({
      search,
      type,
      dateFrom: dateFrom ? new Date(dateFrom) : undefined,
      dateTo: dateTo ? new Date(dateTo) : undefined,
      sortBy,
      sortOrder,
      page: page ? Number(page) : undefined,
      limit: limit ? Number(limit) : undefined,
    });
  }
}


backend/src/moderator/moderator.module.ts

import { Module } from '@nestjs/common';
import { TypeOrmModule } from '@nestjs/typeorm';
import { User } from '../users/user.entity';
import { Event } from '../event/event.entity';
import { ModeratorService } from './moderator.service';
import { ModeratorController } from './moderator.controller';
import { JwtModule } from '@nestjs/jwt';

@Module({
  imports: [TypeOrmModule.forFeature([User, Event]), JwtModule],
  providers: [ModeratorService],
  controllers: [ModeratorController],
})
export class ModeratorModule {}


backend/src/moderator/moderator.service.ts
import { Injectable } from '@nestjs/common';
import { DataSource, SelectQueryBuilder } from 'typeorm';
import { User } from '../users/user.entity';
import { Event } from '../event/event.entity';

interface UserFilters {
  search?: string;
  city?: string;
  role?: string;
  sortBy?: string;
  sortOrder?: 'asc' | 'desc';
  page?: number;
  limit?: number;
}

interface EventFilters {
  search?: string;
  type?: string;
  dateFrom?: Date;
  dateTo?: Date;
  sortBy?: string;
  sortOrder?: 'asc' | 'desc';
  page?: number;
  limit?: number;
}

@Injectable()
export class ModeratorService {
  constructor(private dataSource: DataSource) {}

  async getUsers(filters: UserFilters): Promise<{ data: User[]; total: number }> {
    const userRepository = this.dataSource.getRepository(User);
    let query: SelectQueryBuilder<User> = userRepository.createQueryBuilder('user');

    if (filters.search) {
      query = query.andWhere('(user.username LIKE :search OR user.email LIKE :search)', {
        search: `%${filters.search}%`,
      });
    }
    if (filters.city) {
      query = query.andWhere('user.city = :city', { city: filters.city });
    }
    if (filters.role) {
      query = query.andWhere('user.role = :role', { role: filters.role });
    }
    if (filters.sortBy) {
      const order = filters.sortOrder === 'desc' ? 'DESC' : 'ASC';
      query = query.orderBy(`user.${filters.sortBy}`, order);
    } else {
      query = query.orderBy('user.id', 'ASC');
    }

    const page = filters.page || 1;
    const limit = filters.limit || 20;
    query = query.skip((page - 1) * limit).take(limit);

    const [data, total] = await query.getManyAndCount();

    return { data, total };
  }

  async getEvents(filters: EventFilters): Promise<{ data: Event[]; total: number }> {
    const eventRepository = this.dataSource.getRepository(Event);
    let query: SelectQueryBuilder<Event> = eventRepository.createQueryBuilder('event');

    query = query.leftJoinAndSelect('event.creator', 'creator');

    if (filters.search) {
      query = query.andWhere('(event.title LIKE :search OR event.description LIKE :search)', {
        search: `%${filters.search}%`,
      });
    }
    if (filters.type) {
      query = query.andWhere('event.type = :type', { type: filters.type });
    }
    if (filters.dateFrom) {
      query = query.andWhere('event.date >= :dateFrom', { dateFrom: filters.dateFrom });
    }
    if (filters.dateTo) {
      query = query.andWhere('event.date <= :dateTo', { dateTo: filters.dateTo });
    }
    if (filters.sortBy) {
      const order = filters.sortOrder === 'desc' ? 'DESC' : 'ASC';
      query = query.orderBy(`event.${filters.sortBy}`, order);
    } else {
      query = query.orderBy('event.date', 'DESC');
    }

    const page = filters.page || 1;
    const limit = filters.limit || 20;
    query = query.skip((page - 1) * limit).take(limit);

    const [data, total] = await query.getManyAndCount();

    return { data, total };
  }
}


backend/src/redis/redis.constants.ts
export const REDIS_SESSION_CLIENT = 'REDIS_SESSION_CLIENT';
export const REDIS_CACHE_CLIENT = 'REDIS_CACHE_CLIENT';

backend/src/redis/redis.module.ts

import { Module, Global } from '@nestjs/common';
import { createClient } from 'redis';
import { REDIS_SESSION_CLIENT } from './redis.constants';
import { RedisService } from './redis.service';

@Global()
@Module({
  providers: [
    {
      provide: REDIS_SESSION_CLIENT, 
      useFactory: async () => {
        const client = createClient({
          url: 'redis://localhost:6379'
        });
        await client.connect();
        return client;
      }
    }, RedisService
  ],
  exports: [REDIS_SESSION_CLIENT, RedisService],
})
export class RedisModule {}

backend/src/redis/redis.service.ts

import { Injectable, Inject } from '@nestjs/common';
import { Redis } from 'ioredis';
import { REDIS_SESSION_CLIENT } from './redis.constants';
 
@Injectable()
export class RedisService {
  constructor(@Inject(REDIS_SESSION_CLIENT) private readonly redisClient: Redis) {}

  async setWithTTL(
    key: string,
    value: string,
    expirySeconds: number,
  ): Promise<void> {
    await this.redisClient.set(key, value, 'EX', expirySeconds);
  }

  async get(key: string): Promise<string | null> {
    return this.redisClient.get(key);
  }

  async delete(key: string): Promise<void> {
    await this.redisClient.del(key);
  }

  async incrementAttempts(key: string): Promise<number> {
    return this.redisClient.incr(`${key}:attempts`);
  }

  async getAttempts(key: string): Promise<number> {
    const attempts = await this.redisClient.get(`${key}:attempts`);
    return attempts ? parseInt(attempts, 10) : 0;
  }
}


backend/src/strategies/jwt.strategies.ts

import { Injectable } from '@nestjs/common';
import { PassportStrategy } from '@nestjs/passport';
import { ExtractJwt, Strategy } from 'passport-jwt';
import { UsersService } from 'src/users/users.service';
import { ConfigService } from '@nestjs/config';
import { UnauthorizedException } from '@nestjs/common';

@Injectable()
export class JwtStrategy extends PassportStrategy(Strategy) {
  constructor(
    private usersService: UsersService,
    configService: ConfigService,
  ) {
    const secretKey = configService.get<string>('secretKey');
    super({
      jwtFromRequest: ExtractJwt.fromExtractors([
        (req) =>
          req?.cookies?.access_token, 
      ]),
      ignoreExpiration: false,
      secretOrKey: secretKey, 
    });
  }

  async validate(payload: any) {

    const user = await this.usersService.findById(payload.sub);

    if (!user) {
      throw new UnauthorizedException('Пользователь не найден!');
    }

    return {
      sub: user.id,     
      username: user.username,
      role: user.role,   
    };
  }
}


backend/src/stripe/stripe.service.ts

import { Injectable, Logger } from '@nestjs/common';
import Stripe from 'stripe';

@Injectable()
export class StripeService {
  private stripe: Stripe;
  private logger = new Logger(StripeService.name);

  constructor() {
    this.stripe = new Stripe(process.env.STRIPE_SECRET_KEY, {
      apiVersion: '2025-04-30.basil',
    }); 
  }

  async createCustomer(email: string): Promise<Stripe.Customer> {
    const customers = await this.stripe.customers.list({ email });
    if (customers.data.length > 0) {
      return customers.data[0];
    }
    return this.stripe.customers.create({ email });
  } 

  async createSubscription(customerId: string, priceId: string): Promise<Stripe.Subscription> {
    return this.stripe.subscriptions.create({
      customer: customerId,
      items: [{ price: priceId }],
      payment_behavior: 'default_incomplete',
      // expand: ['latest_invoice.payment_intent'],
    });
  }

  async retrieveSubscription(subscriptionId: string): Promise<Stripe.Subscription> {
    return this.stripe.subscriptions.retrieve(subscriptionId);
  }

  async constructEvent(payload: Buffer, signature: string, endpointSecret: string): Promise<Stripe.Event> {
    try {
      return this.stripe.webhooks.constructEvent(payload, signature, endpointSecret);
    } catch (err) {
      this.logger.error('Webhook signature verification failed.', err);
      throw err;
    }
  }
}


backend/src/users/user.entity.ts
import {
  Entity,
  PrimaryGeneratedColumn,
  Column,
  Unique,
  OneToMany,
} from 'typeorm';
import { Roles } from 'src/auth/roles.enum';
import { UserHobby } from '../hobby/user-hobby.entity';
import { Event } from 'src/event/event.entity';
import { EventSubscription } from 'src/event/event-subscription.entity';

@Entity()
@Unique(['username'])
export class User {
  @PrimaryGeneratedColumn()
  id: number;

  @Column()
  email: string;

  @Column()
  username: string;

  @Column()
  password: string;

  @Column({
    type: 'enum',
    enum: Roles,
    default: Roles.USER,
  })
  role: Roles;

  @Column({ nullable: true })
  avatar: string;

  @Column({ nullable: true, type: 'text' })
  description: string;

  @Column({ nullable: true })
  city: string;

  @Column({ nullable: true, type: 'int' })
  age: number;

  @OneToMany(() => UserHobby, (userHobby) => userHobby.user)
  hobbies: UserHobby[];

  @OneToMany(() => Event, (event) => event.creator) 
  events: Event[];

  @OneToMany(() => EventSubscription, subscription => subscription.user)
  eventSubscriptions: EventSubscription[];

  @Column({ default: false })
  isPlusSubscriber: boolean;

  @Column({ nullable: true, type: 'timestamp' })
  plusSubscriptionExpiresAt: Date | null;
}


backend/src/users/users.controller.ts
import { Controller, Get, Patch, Body, Req, UseGuards, UnauthorizedException, Request, ForbiddenException, Post, Delete, Param, UseInterceptors, UploadedFile } from '@nestjs/common'
import { UsersService } from './users.service'
import { Roles } from 'src/auth/roles.decorator'
import { Roles as Role } from '../auth/roles.enum'
import { UpdateUsernameDto } from '../auth/dto/update-username.dto'
import { UpdateAgeDto } from '../auth/dto/update-age.dto'
import { UpdateCityDto } from '../auth/dto/update-city.dto'
import { JwtAuthGuard } from 'src/auth/guards/jwt-auth.guard'
import { RolesGuard } from 'src/auth/roles.guard'
import { AddHobbyDto } from 'src/auth/dto/add-hobby.dto'
import { UpdateAvatarDto } from 'src/auth/dto/update-avatar.dto'
import { FileInterceptor } from '@nestjs/platform-express'
import { diskStorage } from 'multer';
import { extname } from 'path'
import { StripeService } from 'src/stripe/stripe.service';

@Controller('users')
@UseGuards(JwtAuthGuard) 
export class UsersController {
  constructor(
    private readonly usersService: UsersService,
    private readonly stripeService: StripeService,
  ) {}

  @Get('me')
  async getCurrentUser(@Request() req) {
    const user = await this.usersService.findById(req.user.sub);
    if (!user) {
      throw new UnauthorizedException('Пользователь не найден!');
    }
    
    return {
      sub:user.id,
      username: user.username,
      email: user.email,
      role: user.role,
      avatar: user.avatar,
      age: user.age,
      city: user.city,
      description: user.description,
      isPlusSubscriber: user.isPlusSubscriber,
      plusSubscriptionExpiresAt: user.plusSubscriptionExpiresAt,
    };
  }

  @Post('me/subscribe')
  async createSubscription(@Request() req) {
    const userId = req.user.sub;
    const user = await this.usersService.findById(userId);
    if (!user) {
      throw new UnauthorizedException('Пользователь не найден!');
    }

    const customer = await this.stripeService.createCustomer(user.email);

    const priceId = process.env.STRIPE_PLUS_PRICE_ID;
    if (!priceId) {
      throw new Error('STRIPE_PLUS_PRICE_ID не настроен');
    }

    const subscription = await this.stripeService.createSubscription(customer.id, priceId);
 
    let clientSecret = null;
    if (typeof subscription.latest_invoice !== 'string' && subscription.latest_invoice) {
      // @ts-ignore
      if ('payment_intent' in subscription.latest_invoice && subscription.latest_invoice.payment_intent) {
        // @ts-ignore
        clientSecret = subscription.latest_invoice.payment_intent.client_secret;
      }
    }

    return {
      subscriptionId: subscription.id,
      clientSecret,
      status: subscription.status,
    };
  }

  @Get('me/subscription') 
  async getSubscriptionStatus(@Request() req) {
    return this.usersService.getSubscriptionStatus(req.user.sub);
  }

  @Get('me/description')
  async getDescription(@Request() req) {
    const userId = req.user.sub;
    return this.usersService.getDescription(userId);
  }

  @Patch('me/description')
  async updateDescription(@Request() req, @Body('description') description: string) {
    const userId = req.user.sub;
    return this.usersService.updateDescription(userId, description);
  }


  @Patch('me/username')
  @UseGuards(RolesGuard)
  @Roles(Role.USER, Role.MODERATOR, Role.ADMIN)
  async updateOwnUsername(@Request() req, @Body() dto: UpdateUsernameDto) {
    const userId = req.user.sub;

    const user = await this.usersService.findById(userId);
    if (!user) {
      throw new UnauthorizedException('Пользователь не найден!');
    }

    return this.usersService.updateUsername(userId, dto);
  }

  @Patch('me/age')
  @UseGuards(RolesGuard)
  @Roles(Role.USER, Role.MODERATOR, Role.ADMIN)
  async updateOwnAge(@Request() req, @Body() dto: UpdateAgeDto) {
    const userId = req.user.sub;

    const user = await this.usersService.findById(userId);
    if (!user) {
      throw new UnauthorizedException('Пользователь не найден!');
    }

    return this.usersService.updateAge(userId, dto.age);
  }

  @Patch('me/city')
  @UseGuards(RolesGuard)
  @Roles(Role.USER, Role.MODERATOR, Role.ADMIN)
  async updateOwnCity(@Request() req, @Body() dto: UpdateCityDto) {
    const userId = req.user.sub;

    const user = await this.usersService.findById(userId);
    if (!user) {
      throw new UnauthorizedException('Пользователь не найден!');
    }

    return this.usersService.updateCity(userId, dto.city);
  }

  @Post('me/hobbies')
  @UseGuards(RolesGuard)
  @Roles(Role.USER, Role.MODERATOR, Role.ADMIN)
  async addHobbies(@Request() req, @Body() dto: AddHobbyDto) {
    const userId = req.user.sub;
    return this.usersService.addHobbies(userId, dto.hobbyNames);
  }

  @Get('me/hobbies')
  @UseGuards(RolesGuard)
  @Roles(Role.USER, Role.MODERATOR, Role.ADMIN)
  async getUserHobbies(@Request() req) {
    const userId = req.user.sub;
    return this.usersService.getUserHobbies(userId);
  }

  @Delete('me/hobbies/:hobbyId')
  @UseGuards(RolesGuard)
  @Roles(Role.USER, Role.MODERATOR, Role.ADMIN)
  async removeHobby(@Request() req, @Param('hobbyId') hobbyId: number) {
    const userId = req.user.sub;
    return this.usersService.removeHobby(userId, hobbyId);
  }

  @Patch('me/avatar') 
  async updateAvatar(@Req() req, @Body() dto: UpdateAvatarDto) {
    return this.usersService.updateAvatar(req.user.sub, dto);
  }

  @Patch('me/avatar/upload') 
  @UseInterceptors(FileInterceptor('file', {
    storage: diskStorage({
      destination: './uploads',
      filename: (_req, file, cb) => {
        const uniqueSuffix = Date.now() + extname(file.originalname);
        cb(null, `${file.fieldname}-${uniqueSuffix}`);
      },
    }),
    limits: { fileSize: 2 * 1024 * 1024 }, 
  }))
  
  async uploadAvatar(
    @Req() req,
    @UploadedFile() file: Express.Multer.File,
  ) {
    if (!file) {
      throw new ForbiddenException('Файл не загружен');
    }
    return this.usersService.uploadAvatar(req.user.sub, file.filename);
  }


}

backend/src/users/users.module.ts
import { Module } from '@nestjs/common';
import { UsersService } from './users.service';
import { UsersController } from './users.controller';
import { TypeOrmModule } from '@nestjs/typeorm';
import { User } from './user.entity';
import { JwtModule } from '@nestjs/jwt';
import { Hobby } from 'src/hobby/hobby.entity';
import { UserHobby } from 'src/hobby/user-hobby.entity';
import { StripeService } from 'src/stripe/stripe.service';

@Module({
  imports:[TypeOrmModule.forFeature([User, Hobby, UserHobby]), JwtModule],
  providers: [UsersService, StripeService],
  controllers: [UsersController],
  exports :[UsersService, ]
})
export class UsersModule {}



backend/src/users/users.service.ts

import {
  Injectable,
  ConflictException,
  NotFoundException,
  BadRequestException,
} from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import * as bcrypt from 'bcrypt';
import { User } from './user.entity';
import { In, Repository } from 'typeorm';
import { Roles } from 'src/auth/roles.enum';
import { UpdateUsernameDto } from 'src/auth/dto/update-username.dto';
import { Hobby } from 'src/hobby/hobby.entity';
import { UserHobby } from 'src/hobby/user-hobby.entity';
import { UpdateAvatarDto } from 'src/auth/dto/update-avatar.dto';

@Injectable()
export class UsersService {
  constructor(
    @InjectRepository(User)
    private usersRepository: Repository<User>,
    @InjectRepository(Hobby)
    private hobbyRepository: Repository<Hobby>,
    @InjectRepository(UserHobby)
    private userHobbyRepository: Repository<UserHobby>,
  ) {}

  public async createUser(email: string, password: string): Promise<User> {
    const existingUser = await this.usersRepository.findOne({
      where: { email },
    });

    if (existingUser) {
      throw new ConflictException('Email already exists');
    }
    const salt = await bcrypt.genSalt();
    const hashPassword = await bcrypt.hash(password, salt);

    const user = this.usersRepository.create({
      email,
      username:email,
      password: hashPassword,
      role:Roles.USER
    });

    return this.usersRepository.save(user);
  }

  async activatePlusSubscription(userId: number, expiresAt: Date): Promise<User> {
    const user = await this.findById(userId);
    user.isPlusSubscriber = true;
    user.plusSubscriptionExpiresAt = expiresAt;
    return this.usersRepository.save(user);
  }

  async checkAndUpdateSubscriptionStatus(userId: number): Promise<User> {
    const user = await this.findById(userId);
    if (user.plusSubscriptionExpiresAt && user.plusSubscriptionExpiresAt < new Date()) {
      user.isPlusSubscriber = false;
      user.plusSubscriptionExpiresAt = null;
      await this.usersRepository.save(user);
    }
    return user;
  }

  async getSubscriptionStatus(userId: number): Promise<{ isPlusSubscriber: boolean; plusSubscriptionExpiresAt: Date | null }> {
    const user = await this.findById(userId);
    return {
      isPlusSubscriber: user.isPlusSubscriber,
      plusSubscriptionExpiresAt: user.plusSubscriptionExpiresAt,
    };
  }

  
  async findById(id: number): Promise<User> {
    const user = await this.usersRepository.findOne({ where: { id } })

    if (!user) throw new NotFoundException('Пользователь не найден!')
    return user
  }

  async updateAvatar(userId: number, dto: UpdateAvatarDto): Promise<User> {
    const user = await this.findById(userId);
    if (dto.avatar) {
      user.avatar = dto.avatar; 
    }
    return this.usersRepository.save(user);
  }

  async getDescription(userId: number): Promise<string> {
    const user = await this.findById(userId);
    return user.description;
  }

  async updateDescription(userId: number, description: string): Promise<User> {
    const user = await this.findById(userId);
    user.description = description;
    return this.usersRepository.save(user);
  }

  async uploadAvatar(userId: number, filePath: string): Promise<User> {
    const user = await this.findById(userId);
    user.avatar = `/uploads/${filePath}`; 
    return this.usersRepository.save(user);
  }

  public async findByUsername(username: string): Promise<User | undefined> {
    return this.usersRepository.findOne({ where: { username } });
  }

  public async findByEmail(email: string): Promise<User | undefined> {
    return this.usersRepository.findOne({ where: { email } });
  }
 
  public async validateUser(email: string, password: string): Promise<User> {
    const user = await this.findByEmail(email);

    if (!user) {
      throw new NotFoundException('Пользователь не найден!');
    }

    if (user && (await bcrypt.compare(password, user.password))) {
      return user;
    }
    return null;
  }

  async updateUsername(userId: number, dto: UpdateUsernameDto): Promise<User> {
    const user = await this.findById(userId)
    user.username = dto.username
    return this.usersRepository.save(user)
  }

  async updateAge(userId: number, age: number): Promise<User> {
    const user = await this.findById(userId);
    user.age = age;
    return this.usersRepository.save(user);
  }

  async updateCity(userId: number, city: string): Promise<User> {
    const user = await this.findById(userId);
    user.city = city;
    return this.usersRepository.save(user);
  }

  async getUserHobbies(userId: number): Promise<Hobby[]> {
    const userWithHobbies = await this.usersRepository.findOne({
      where: { id: userId },
      relations: ['hobbies', 'hobbies.hobby'],
    });

    if (!userWithHobbies) {
      throw new NotFoundException('Пользователь не найден!');
    }

    return userWithHobbies.hobbies.map(uh => uh.hobby);
  }

  async addHobbies(userId: number, hobbyNames: string[]): Promise<Hobby[]> {
    if (!hobbyNames || hobbyNames.length === 0) {
      throw new BadRequestException('Никаких увлечений не предусмотрено!');
    }

    const user = await this.findById(userId);
    
    const existingHobbies = await this.hobbyRepository.find({
      where: { name: In(hobbyNames) }
    });

    const newHobbies = hobbyNames
      .filter(name => !existingHobbies.some(h => h.name === name))
      .map(name => {
        const hobby = new Hobby();
        hobby.name = name;
        return hobby;
      });

    if (newHobbies.length > 0) {
      await this.hobbyRepository.save(newHobbies);
    }

    const allHobbies = [...existingHobbies, ...newHobbies];

    const existingConnections = await this.userHobbyRepository.find({
      where: {
        userId,
        hobbyId: In(allHobbies.map(h => h.id))
      }
    });

    const newConnections = allHobbies
      .filter(hobby => !existingConnections.some(c => c.hobbyId === hobby.id))
      .map(hobby => {
        const userHobby = new UserHobby();
        userHobby.userId = userId;
        userHobby.hobbyId = hobby.id;
        return userHobby;
      });

    if (newConnections.length > 0) {
      await this.userHobbyRepository.save(newConnections);
    }

    return allHobbies;
  }

  async removeHobby(userId: number, hobbyId: number): Promise<void> {
    const connection = await this.userHobbyRepository.findOne({
      where: { userId, hobbyId }
    });

    if (!connection) {
      throw new NotFoundException('Хобби для пользователя не найдены!');
    }

    await this.userHobbyRepository.remove(connection);
  }

  async getHobbyByName(name: string): Promise<Hobby | undefined> {
    return this.hobbyRepository.findOne({ where: { name } });
  }

  async updatePassword(email: string, newPassword: string): Promise<void> {
    const user = await this.findByEmail(email);
    if (!user) throw new NotFoundException('Пользователь не найден');
  
    const salt = await bcrypt.genSalt();
    const hashPassword = await bcrypt.hash(newPassword, salt);
  
    user.password = hashPassword;
    await this.usersRepository.save(user);
  }
  
}


frontend/app/globals.css
@import "tailwindcss";
@tailwind base;
@tailwind components;
@tailwind utilities;


:root {
  --background: #000000;
  --foreground: #FFA500;
  --font-sans: 'Montserrat', sans-serif;
}

@theme inline {
  --color-background: var(--background);
  --color-foreground: var(--foreground);
  --font-sans: var(--font-geist-sans);
  --font-mono: var(--font-geist-mono);
}

@media (prefers-color-scheme: dark) {
  :root {
    --background: #000000;
    --foreground: #FFA500;
  }
}

body {
  background: var(--background);
  color: var(--foreground);
  font-family: var(--font-sans);
}


frontend/app/layout.tsx
import './globals.css'
import { ReactNode } from 'react'

import { Montserrat } from 'next/font/google'

const montserrat = Montserrat({
  subsets: ['latin'],
  weight: ['400', '500', '600', '700'],
  variable: '--font-montserrat',
  display: 'swap',
})

export const metadata = {
  title: 'My PWA App',
  description: 'Best app ever',
}

export default function RootLayout({ children }: { children: ReactNode }) {
  return (
    <html lang="en">
      <body className="min-h-screen bg-white text-gray-800">{children}</body>
    </html>
  )
}

frontend/app/page.tsx
"use client";

import Link from "next/link";
import dynamic from "next/dynamic";
import { Toaster } from "react-hot-toast";
import { motion } from "framer-motion";

const YandexMap = dynamic(() => import("@/components/YandexMap"), {
  ssr: false,
});

const fadeIn = {
  hidden: { opacity: 0, y: 20 },
  visible: { opacity: 1, y: 0 },
};

export default function Home() {
  return (
    <div className="font-sans text-white bg-gradient-to-br from-gray-900 to-black min-h-screen overflow-x-hidden">
      <Toaster
        position="top-center"
        toastOptions={{
          style: {
            background: "#111827",
            color: "#fff",
            border: "1px solid rgba(249, 115, 22, 0.5)",
            boxShadow: "0 4px 20px rgba(249, 115, 22, 0.15)",
            backdropFilter: "blur(10px)",
          },
        }}
      />

      {/* Hero Section */}
      <section className="relative h-screen flex items-center justify-center overflow-hidden">
        <div className="absolute inset-0 z-0">
          <video
            autoPlay
            loop
            muted
            playsInline
            className="w-full h-full object-cover"
          >
            <source src="/video_main_page.mp4" type="video/mp4" />
          </video>
          <div className="absolute inset-0 bg-gradient-to-br from-gray-900/80 to-black/90 z-10 backdrop-blur-sm" />
        </div>

        <motion.div
          initial="hidden"
          animate="visible"
          variants={fadeIn}
          transition={{ duration: 0.5 }}
          className="relative z-20 text-center px-6 max-w-4xl bg-gray-900/80 border border-gray-700/50 rounded-2xl shadow-xl p-8"
        >
          <motion.h1
            variants={fadeIn}
            transition={{ delay: 0.2 }}
            className="text-5xl md:text-7xl font-bold mb-6 leading-tight bg-clip-text text-transparent bg-gradient-to-r from-orange-400 to-pink-500"
          >
            Создавай. Находи. <span className="text-orange-400">Участвуй.</span>
          </motion.h1>
          <motion.p
            variants={fadeIn}
            transition={{ delay: 0.4 }}
            className="text-xl md:text-2xl mb-10 text-gray-400"
          >
            Вместе — всё для организаторов и участников в одном месте.
          </motion.p>
          <motion.div
            variants={fadeIn}
            transition={{ delay: 0.6 }}
            className="flex flex-col sm:flex-row justify-center gap-4"
          >
            <Link href="/login">
              <button className="bg-gradient-to-r from-orange-500 to-pink-600 hover:from-orange-600 hover:to-pink-700 text-white font-bold px-8 py-4 rounded-lg transition-all transform hover:scale-105 shadow-lg hover:shadow-orange-500/20">
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  className="h-5 w-5 mr-2 inline"
                  viewBox="0 0 20 20"
                  fill="currentColor"
                >
                  <path
                    fillRule="evenodd"
                    d="M10 9a3 3 0 100-6 3 3 0 000 6zm-7 9a7 7 0 1114 0H3z"
                    clipRule="evenodd"
                  />
                </svg>
                Начать сейчас
              </button>
            </Link>
            <Link href="#features">
              <button className="border-2 border-gray-700/50 hover:border-orange-500/50 text-gray-300 hover:text-orange-400 font-bold px-8 py-4 rounded-lg transition-all backdrop-blur-sm hover:shadow-orange-500/20">
                Подробнее
              </button>
            </Link>
          </motion.div>
        </motion.div>

        <motion.div
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          transition={{ delay: 1.5 }}
          className="absolute bottom-10 left-1/2 transform -translate-x-1/2 z-20"
        >
          <a href="#features" className="animate-bounce inline-block">
            <svg
              className="w-8 h-8 text-orange-400"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
            >
              <path
                strokeLinecap="round"
                strokeLinejoin="round"
                strokeWidth={2}
                d="M19 14l-7 7m0 0l-7-7m7 7V3"
              />
            </svg>
          </a>
        </motion.div>
      </section>

      {/* Features Section */}
      <section id="features" className="py-24">
        <div className="max-w-7xl mx-auto px-4">
          <motion.div
            initial="hidden"
            whileInView="visible"
            viewport={{ once: true }}
            variants={fadeIn}
            transition={{ duration: 0.5 }}
            className="text-center mb-16"
          >
            <h2 className="text-4xl md:text-6xl font-bold mb-6 bg-clip-text text-transparent bg-gradient-to-r from-orange-400 to-pink-500">
              Возможности
            </h2>
            <p className="text-xl text-gray-400 max-w-3xl mx-auto">
              Всё необходимое для организации и участия в событиях
            </p>
          </motion.div>

          <div className="grid md:grid-cols-3 gap-8">
            {[
              {
                icon: "📅",
                title: "Создание событий",
                text: "Простой инструмент для планирования мероприятий.",
                bg: "bg-gray-900/80 border-gray-700/50",
              },
              {
                icon: "🔍",
                title: "Поиск по интересам",
                text: "Рекомендации по интересам и локации.",
                bg: "bg-gray-900/80 border-gray-700/50",
              },
              {
                icon: "🤝",
                title: "Сообщество",
                text: "Общение и новые знакомства.",
                bg: "bg-gray-900/80 border-gray-700/50",
              },
            ].map((item, idx) => (
              <motion.div
                key={idx}
                initial="hidden"
                whileInView="visible"
                viewport={{ once: true }}
                variants={fadeIn}
                transition={{ delay: idx * 0.2, duration: 0.5 }}
                className={`${item.bg} p-8 rounded-2xl hover:shadow-xl transition-all border backdrop-blur-sm hover:border-orange-500/30`}
              >
                <div className="text-5xl mb-6 text-orange-400">{item.icon}</div>
                <h3 className="text-2xl font-bold mb-4 text-gray-100">
                  {item.title}
                </h3>
                <p className="text-gray-400">{item.text}</p>
              </motion.div>
            ))}
          </div>
        </div>
      </section>

      {/* Video & CTA */}
      <section className="py-24">
        <div className="max-w-7xl mx-auto px-4 flex flex-col md:flex-row items-center gap-12">
          <motion.div
            initial="hidden"
            whileInView="visible"
            viewport={{ once: true }}
            variants={fadeIn}
            transition={{ duration: 0.5 }}
            className="md:w-1/2"
          >
            <h2 className="text-4xl md:text-5xl font-bold mb-6 bg-clip-text text-transparent bg-gradient-to-r from-orange-400 to-pink-500">
              Как это работает?
            </h2>
            <p className="text-xl text-gray-400 mb-8">
              Смотрите, как просто найти или создать мероприятие.
            </p>
            <Link href="/login">
              <button className="bg-gradient-to-r from-orange-500 to-pink-600 hover:from-orange-600 hover:to-pink-700 text-white font-bold px-8 py-4 rounded-lg transition-all transform hover:scale-105 shadow-lg hover:shadow-orange-500/20">
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  className="h-5 w-5 mr-2 inline"
                  viewBox="0 0 20 20"
                  fill="currentColor"
                >
                  <path
                    fillRule="evenodd"
                    d="M10 9a3 3 0 100-6 3 3 0 000 6zm-7 9a7 7 0 1114 0H3z"
                    clipRule="evenodd"
                  />
                </svg>
                Попробовать
              </button>
            </Link>
          </motion.div>
          <motion.div
            initial="hidden"
            whileInView="visible"
            viewport={{ once: true }}
            variants={fadeIn}
            transition={{ delay: 0.2, duration: 0.5 }}
            className="md:w-1/2 bg-gray-900/80 rounded-2xl overflow-hidden aspect-video border border-gray-700/50 shadow-xl backdrop-blur-sm"
          >
            <div className="w-full h-full flex items-center justify-center">
              <div className="relative group">
                <button className="w-20 h-20 bg-gradient-to-r from-orange-500 to-pink-600 hover:from-orange-600 hover:to-pink-700 rounded-full flex items-center justify-center shadow-lg transform transition-transform group-hover:scale-110">
                  <svg
                    className="w-10 h-10 text-white"
                    fill="none"
                    stroke="currentColor"
                    viewBox="0 0 24 24"
                  >
                    <path
                      strokeLinecap="round"
                      strokeLinejoin="round"
                      strokeWidth={2}
                      d="M14.752 11.168l-3.197-2.132A1 1 0 0010 9.87v4.263a1 1 0 001.555.832l3.197-2.132a1 1 0 000-1.664z"
                    />
                    <path
                      strokeLinecap="round"
                      strokeLinejoin="round"
                      strokeWidth={2}
                      d="M21 12a9 9 0 11-18 0 9 9 0 0118 0z"
                    />
                  </svg>
                </button>
              </div>
            </div>
          </motion.div>
        </div>
      </section>

      {/* Map Section */}
      <section className="py-24">
        <div className="max-w-7xl mx-auto px-4">
          <motion.div
            initial="hidden"
            whileInView="visible"
            viewport={{ once: true }}
            variants={fadeIn}
            transition={{ duration: 0.5 }}
            className="text-center mb-16"
          >
            <h2 className="text-4xl md:text-5xl font-bold mb-6 bg-clip-text text-transparent bg-gradient-to-r from-orange-400 to-pink-500">
              Мероприятия рядом
            </h2>
            <p className="text-xl text-gray-400 max-w-3xl mx-auto">
              Откройте для себя события на интерактивной карте
            </p>
          </motion.div>
          <motion.div
            initial="hidden"
            whileInView="visible"
            viewport={{ once: true }}
            variants={fadeIn}
            transition={{ duration: 0.5 }}
            className="rounded-2xl overflow-hidden border border-gray-700/50 shadow-xl backdrop-blur-sm"
          >
            <YandexMap />
          </motion.div>
        </div>
      </section>

      <section className="py-32 bg-gradient-to-r from-orange-600/80 to-pink-700/80 relative overflow-hidden backdrop-blur-md">
        <div className="absolute inset-0 opacity-5 bg-[url('/pattern.svg')] bg-[length:200px]" />
        <motion.div
          initial="hidden"
          whileInView="visible"
          viewport={{ once: true }}
          variants={fadeIn}
          transition={{ duration: 0.5 }}
          className="max-w-4xl mx-auto text-center px-4 relative bg-gray-900/90 border border-gray-700/50 rounded-2xl p-8 shadow-xl backdrop-blur-sm"
        >
          <h2 className="text-4xl md:text-6xl font-bold mb-8 bg-clip-text text-transparent bg-gradient-to-r from-orange-400 to-pink-500">
            Присоединяйтесь сейчас
          </h2>
          <p className="text-xl md:text-2xl mb-10 max-w-2xl mx-auto text-gray-300">
            Тысячи людей уже с нами — будь среди них
          </p>
          <div className="flex flex-col sm:flex-row gap-4 justify-center">
            <Link href="/register">
              <button className="bg-gradient-to-r from-orange-500 to-pink-600 hover:from-orange-600 hover:to-pink-700 text-white font-bold px-8 py-4 rounded-lg transition-all transform hover:scale-105 shadow-lg hover:shadow-orange-500/20">
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  className="h-5 w-5 mr-2 inline"
                  viewBox="0 0 20 20"
                  fill="currentColor"
                >
                  <path
                    fillRule="evenodd"
                    d="M10 9a3 3 0 100-6 3 3 0 000 6zm-7 9a7 7 0 1114 0H3z"
                    clipRule="evenodd"
                  />
                </svg>
                Зарегистрироваться
              </button>
            </Link>
            <Link href="/login">
              <button className="border-2 border-gray-700/50 hover:border-orange-500/50 text-gray-300 hover:text-orange-400 font-bold px-8 py-4 rounded-lg transition-all backdrop-blur-sm hover:shadow-orange-500/20">
                Войти
              </button>
            </Link>
          </div>
        </motion.div>
      </section>
    </div>
  );
}


frontend/app/dashboard/page.tsx

"use client";

import { useEffect, useState } from "react";
import { useRouter } from "next/navigation";
import axios from "axios";
import Link from "next/link";
import SubscriptionForm from "../../components/SubscriptionForm";
import Sidebar from "../../components/Sidebar"; 

interface HobbyData {
  id: number;
  name: string;
}

interface Event {
  id: number;
  title: string;
  description: string;
  date: string;
}

interface UserData {
  username: string;
  email: string;
  hobbies: HobbyData[];
  avatar: string;
  city?: string;
  age?: number;
  description?: string;
  isPlusSubscriber?: boolean;
  plusSubscriptionExpiresAt?: string;
}

export default function DashboardPage() {
  const [user, setUser] = useState<UserData | null>(null);
  const [username, setUsername] = useState("");
  const [city, setCity] = useState("");
  const [age, setAge] = useState("");
  const [avatarUrl, setAvatarUrl] = useState("");
  const [hobbies, setHobbies] = useState<HobbyData[]>([]);
  const [allHobbies, setAllHobbies] = useState<string[]>([]);
  const [newHobby, setNewHobby] = useState("");
  const [message, setMessage] = useState("");
  const [messageType, setMessageType] = useState<"success" | "error">("success");
  const [loading, setLoading] = useState(true);
  const [isCustomHobby, setIsCustomHobby] = useState(false);
  const [showDescriptionInput, setShowDescriptionInput] = useState(false);
  const [description, setDescription] = useState("");
  const [showSubscriptionPopup, setShowSubscriptionPopup] = useState(false);
  const [showMessagePopup, setShowMessagePopup] = useState(false);
  const [subscriptionClientSecret, setSubscriptionClientSecret] = useState<string | null>(null);
  const [showPaymentForm, setShowPaymentForm] = useState(false);
  const [createdEvents, setCreatedEvents] = useState<Event[]>([]);
  const [subscribedEvents, setSubscribedEvents] = useState<Event[]>([]);
  const [activeMeetingTab, setActiveMeetingTab] = useState<"subscribed" | "created">("subscribed");

  const router = useRouter();

  useEffect(() => {
    const fetchData = async () => {
      try {
        const [userRes, hobbiesRes, allHobbiesRes, meetingsRes] = await Promise.all([
          axios.get("http://localhost:3000/users/me", { withCredentials: true }),
          axios.get("http://localhost:3000/users/me/hobbies", { withCredentials: true }),
          axios.get("http://localhost:3000/hobbies", { withCredentials: true }),
          axios.get("http://localhost:3000/events/mine", { withCredentials: true }),
        ]);

        const userData = userRes.data as UserData;

        setUser({ ...userData, hobbies: hobbiesRes.data });
        setUsername(userData.username);
        setCity(userData.city || "");
        setAge(userData.age?.toString() || "");
        setAvatarUrl(userData.avatar || "");
        setDescription(userData.description || "");
        setHobbies(hobbiesRes.data);
        setAllHobbies(allHobbiesRes.data.map((h: HobbyData) => h.name));
        setCreatedEvents(meetingsRes.data.createdEvents);
        setSubscribedEvents(meetingsRes.data.subscribedEvents);
      } catch {
        router.push("/login?reason=unauthorized");
      } finally {
        setLoading(false);
      }
    };

    fetchData();
  }, [router]);

  const showMessage = (msg: string, type: "success" | "error") => {
    setMessage(msg);
    setMessageType(type);
    setShowMessagePopup(true);
    setTimeout(() => {
      setShowMessagePopup(false);
      setMessage("");
    }, 3000);
  };

  const handleLogout = async () => {
    try {
      await axios.post("http://localhost:3000/auth/logout", {}, { withCredentials: true });
      router.push("/login");
    } catch {
      showMessage("Ошибка при выходе", "error");
    }
  };

  const updateProfile = async () => {
    try {
      const updatePromises = [];

      if (user?.username !== username) {
        updatePromises.push(
          axios.patch("http://localhost:3000/users/me/username", { username }, { withCredentials: true })
        );
      }

      if (user?.city !== city) {
        updatePromises.push(
          axios.patch("http://localhost:3000/users/me/city", { city }, { withCredentials: true })
        );
      }

      if (user?.age !== parseInt(age)) {
        updatePromises.push(
          axios.patch("http://localhost:3000/users/me/age", { age: parseInt(age) || null }, { withCredentials: true })
        );
      }

      if (user?.description !== description) {
        updatePromises.push(
          axios.patch("http://localhost:3000/users/me/description", { description }, { withCredentials: true })
        );
      }

      await Promise.all(updatePromises);

      setUser((u) => (u ? { ...u, username, city, age: parseInt(age) || undefined, description } : u));
      showMessage("Профиль обновлен", "success");
    } catch {
      showMessage("Ошибка при обновлении профиля", "error");
    }
  };

  const updateAvatarByUrl = async () => {
    try {
      await axios.patch("http://localhost:3000/users/me/avatar", { avatar: avatarUrl }, { withCredentials: true });
      setUser((u) => (u ? { ...u, avatar: avatarUrl } : u));
      showMessage("Аватар обновлен", "success");
    } catch {
      showMessage("Ошибка при обновлении аватара", "error");
    }
  };

  const handleFileUpload = async (file: File) => {
    const formData = new FormData();
    formData.append("file", file);

    try {
      const res = await axios.patch("http://localhost:3000/users/me/avatar/upload", formData, {
        withCredentials: true,
        headers: { "Content-Type": "multipart/form-data" },
      });
      setUser((u) => (u ? { ...u, avatar: res.data.avatar } : u));
      setAvatarUrl(res.data.avatar);
      showMessage("Аватар загружен и обновлен", "success");
    } catch {
      showMessage("Ошибка при загрузке файла", "error");
    }
  };

  const handleAvatarChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (!file) return;

    if (file.size > 2 * 1024 * 1024) {
      showMessage("Файл слишком большой (макс. 2MB)", "error");
      return;
    }

    handleFileUpload(file);
  };

  const addHobby = async () => {
    if (!newHobby.trim()) return;
    try {
      await axios.post("http://localhost:3000/users/me/hobbies", { hobbyNames: [newHobby.trim()] }, { withCredentials: true });
      const res = await axios.get("http://localhost:3000/users/me/hobbies", { withCredentials: true });
      setHobbies(res.data);
      setNewHobby("");
    } catch {
      throw new Error("Ошибка при добавлении увлечения");
    }
  };

  const removeHobby = async (id: number) => {
    try {
      await axios.delete(`http://localhost:3000/users/me/hobbies/${id}`, { withCredentials: true });
      setHobbies((h) => h.filter((x) => x.id !== id));
      showMessage("Увлечение удалено", "success");
    } catch {
      showMessage("Ошибка при удалении", "error");
    }
  };

  const saveHobbies = async () => {
    if (!newHobby.trim()) return;
    try {
      await addHobby();
      showMessage("Хобби сохранены", "success");
    } catch {
      showMessage("Ошибка при сохранении хобби", "error");
    }
  };

  const openSubscriptionPopup = () => {
    setShowSubscriptionPopup(true);
  };

  const closeSubscriptionPopup = () => {
    setShowSubscriptionPopup(false);
  };

  const handleSubscribe = async () => {
    try {
      const res = await axios.post("http://localhost:3000/users/me/subscribe", {}, { withCredentials: true });
      const { clientSecret } = res.data;
      if (clientSecret) {
        setSubscriptionClientSecret(clientSecret);
        setShowPaymentForm(true);
      } else {
        showMessage("Подписка оформлена. Спасибо!", "success");
        closeSubscriptionPopup();
        const userRes = await axios.get("http://localhost:3000/users/me", { withCredentials: true });
        setUser(userRes.data);
      }
    } catch {
      showMessage("Ошибка при оформлении подписки", "error");
    }
  };

  const handlePaymentSuccess = async () => {
    showMessage("Оплата прошла успешно! Подписка активирована.", "success");
    setShowPaymentForm(false);
    setSubscriptionClientSecret(null);
    closeSubscriptionPopup();
    const userRes = await axios.get("http://localhost:3000/users/me", { withCredentials: true });
    setUser(userRes.data);
  };

  const handlePaymentError = (message: string) => {
    showMessage(message, "error");
  };

  const handlePaymentCancel = () => {
    setShowPaymentForm(false);
    setSubscriptionClientSecret(null);
  };

  const handleCreateMeeting = () => {
    router.push("http://localhost:3001/events/create");
  };

  if (loading) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-black text-orange-400">
        Загрузка...
      </div>
    );
  }

  return (
    <div className="flex min-h-screen bg-gradient-to-b from-gray-900 to-black">
      <Sidebar />
      <div className="flex-1 px-4 py-8 text-gray-100 md:ml-56">
        {showMessagePopup && (
          <div
            className={`fixed top-6 left-1/2 transform -translate-x-1/2 z-50 px-6 py-3 rounded-lg shadow-xl ${
              messageType === "success"
                ? "bg-gradient-to-r from-green-600 to-emerald-700"
                : "bg-gradient-to-r from-red-600 to-rose-700"
            } text-white flex items-center space-x-2 animate-fade-in`}
          >
            {messageType === "success" ? (
              <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
              </svg>
            ) : (
              <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
              </svg>
            )}
            <span>{message}</span>
          </div>
        )}

        <div className="max-w-4xl mx-auto space-y-8">
          <div className="flex flex-col md:flex-row gap-6">
            <div className="bg-gray-800 p-6 rounded-2xl shadow-lg border border-gray-700 w-full md:w-1/3">
              <div className="flex flex-col items-center">
                <div className="relative group">
                  <img
                    src={user?.avatar || "/placeholder.png"}
                    alt="Аватар"
                    className="w-32 h-32 rounded-full object-cover border-4 border-orange-500 shadow-lg"
                  />
                  <label className="absolute inset-0 flex items-center justify-center bg-black bg-opacity-50 rounded-full opacity-0 group-hover:opacity-100 transition-opacity cursor-pointer">
                    <svg className="w-8 h-8 text-orange-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 9a2 2 0 012-2h.93a2 2 0 001.664-.89l.812-1.22A2 2 0 0110.07 4h3.86a2 2 0 011.664.89l.812 1.22A2 2 0 0018.07 7H19a2 2 0 012 2v9a2 2 0 01-2 2H5a2 2 0 01-2-2V9z" />
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 13a3 3 0 11-6 0 3 3 0 016 0z" />
                    </svg>
                    <input
                      type="file"
                      accept="image/*"
                      onChange={handleAvatarChange}
                      className="hidden"
                    />
                  </label>
                </div>

                <div className="mt-4 text-center">
                  <h1 className="text-2xl font-bold text-orange-400">{username}</h1>
                  <div className="flex justify-center space-x-4 mt-1">
                    {city && (
                      <span className="flex items-center text-gray-300">
                        <svg className="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z" />
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 11a3 3 0 11-6 0 3 3 0 016 0z" />
                        </svg>
                        {city}
                      </span>
                    )}
                    {age && (
                      <span className="flex items-center text-gray-300">
                        <svg className="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
                        </svg>
                        {age} лет
                      </span>
                    )}
                  </div>
                </div>

                <div className="w-full mt-4">
                  <label className="block text-sm font-medium mb-1 text-gray-300">Ссылка на аватар</label>
                  <div className="flex space-x-2">
                    <input
                      value={avatarUrl}
                      onChange={(e) => setAvatarUrl(e.target.value)}
                      className="flex-1 px-3 py-2 border border-gray-600 rounded-lg bg-gray-700 text-gray-100 focus:outline-none focus:ring-2 focus:ring-orange-500"
                      placeholder="https://..."
                    />
                    <button
                      onClick={updateAvatarByUrl}
                      className="bg-orange-500 hover:bg-orange-600 text-black px-2 py-2 rounded-lg transition transform hover:scale-105"
                    >
                      <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                      </svg>
                    </button>
                  </div>
                </div>
              </div>
            </div>

            <div className="bg-gray-800 p-6 rounded-2xl shadow-lg border border-gray-700 w-full md:w-2/3 space-y-6">
              <div>
                <div className="flex justify-between items-center mb-2">
                  <h2 className="text-xl font-semibold text-orange-400">О себе</h2>
                  <button
                    onClick={() => setShowDescriptionInput(!showDescriptionInput)}
                    className="text-orange-500 hover:text-orange-400 text-sm flex items-center"
                  >
                    {showDescriptionInput ? (
                      <>
                        <svg className="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                        </svg>
                        Отмена
                      </>
                    ) : (
                      <>
                        <svg className="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
                        </svg>
                        {description ? "Редактировать" : "Добавить"}
                      </>
                    )}
                  </button>
                </div>

                {!showDescriptionInput && description ? (
                  <p className="text-gray-300 whitespace-pre-line">{description}</p>
                ) : !showDescriptionInput ? (
                  <p className="text-gray-500 italic">Расскажите о себе...</p>
                ) : (
                  <div className="space-y-2">
                    <textarea
                      value={description}
                      onChange={(e) => setDescription(e.target.value)}
                      className="w-full p-3 border border-gray-600 rounded-lg bg-gray-700 text-gray-100 focus:outline-none focus:ring-2 focus:ring-orange-500"
                      placeholder="Расскажите о себе..."
                      rows={4}
                    />
                    <button
                      onClick={updateProfile}
                      className="bg-orange-500 hover:bg-orange-600 text-black py-2 px-4 rounded-lg transition transform hover:scale-105 flex items-center justify-center"
                    >
                      <svg className="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 7H5a2 2 0 00-2 2v9a2 2 0 002 2h14a2 2 0 002-2V9a2 2 0 00-2-2h-3m-1 4l-3 3m0 0l-3-3m3 3V4" />
                      </svg>
                      Сохранить
                    </button>
                  </div>
                )}
              </div>

              <div>
                <h2 className="text-xl font-semibold mb-3 text-orange-400">Мои увлечения</h2>
                {hobbies.length > 0 ? (
                  <div className="flex flex-wrap gap-2 mb-4">
                    {hobbies.map((h) => (
                      <span
                        key={h.id}
                        className="px-3 py-1 bg-orange-500 bg-opacity-20 text-orange-200 rounded-full text-sm flex items-center space-x-1 border border-orange-500 border-opacity-50 hover:bg-opacity-30 transition"
                      >
                        <span>{h.name}</span>
                        <button
                          onClick={() => removeHobby(h.id)}
                          className="text-orange-300 hover:text-orange-100 ml-1 text-xs transition"
                        >
                          ✕
                        </button>
                      </span>
                    ))}
                  </div>
                ) : (
                  <p className="text-gray-500 italic mb-4">У вас пока нет увлечений</p>
                )}

                <div className="space-y-3">
                  <div className="flex space-x-2">
                    <select
                      value={isCustomHobby ? "__custom__" : newHobby}
                      onChange={(e) => {
                        const value = e.target.value;
                        if (value === "__custom__") {
                          setIsCustomHobby(true);
                          setNewHobby("");
                        } else {
                          setIsCustomHobby(false);
                          setNewHobby(value);
                        }
                      }}
                      className="flex-1 px-3 py-2 border border-gray-600 rounded-lg bg-gray-700 text-gray-100 focus:outline-none focus:ring-2 focus:ring-orange-500"
                    >
                      <option value="">Выберите из списка...</option>
                      {allHobbies.map((h, idx) => (
                        <option key={idx} value={h}>
                          {h}
                        </option>
                      ))}
                      <option value="__custom__">Добавить своё</option>
                    </select>
                  </div>

                  {isCustomHobby && (
                    <div className="flex space-x-2">
                      <input
                        placeholder="Введите своё увлечение"
                        value={newHobby}
                        onChange={(e) => setNewHobby(e.target.value)}
                        className="flex-1 px-3 py-2 border border-gray-600 rounded-lg bg-gray-700 text-gray-100 focus:outline-none focus:ring-2 focus:ring-orange-500"
                      />
                    </div>
                  )}

                  <button
                    onClick={saveHobbies}
                    disabled={!newHobby.trim()}
                    className={`w-full py-2 rounded-lg transition flex items-center justify-center ${
                      !newHobby.trim()
                        ? "bg-gray-700 text-gray-500 cursor-not-allowed"
                        : "bg-orange-500 hover:bg-orange-600 text-black transform hover:scale-105"
                    }`}
                  >
                    <svg className="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
                    </svg>
                    Добавить увлечение
                  </button>
                </div>
              </div>
            </div>
          </div>

          <div className="bg-gray-800 p-6 rounded-2xl shadow-lg border border-gray-700">
            <div className="flex flex-col md:flex-row md:items-center justify-between">
              <div className="mb-4 md:mb-0">
                <h2 className="text-xl font-semibold text-orange-400">Подписка Plus</h2>
                <p className="text-gray-300">Дополнительные возможности и привилегии</p>
              </div>

              {user?.isPlusSubscriber ? (
                <div className="bg-green-900 bg-opacity-30 border border-green-600 px-4 py-2 rounded-lg">
                  <p className="text-green-400 font-medium">
                    <svg className="w-5 h-5 inline mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                    </svg>
                    Активна до {user.plusSubscriptionExpiresAt ? new Date(user.plusSubscriptionExpiresAt).toLocaleDateString() : "неизвестно"}
                  </p>
                </div>
              ) : (
                <button
                  onClick={openSubscriptionPopup}
                  className="bg-gradient-to-r from-orange-500 to-pink-500 hover:from-orange-600 hover:to-pink-600 text-black font-bold py-3 px-6 rounded-lg shadow-lg transition transform hover:scale-105 flex items-center justify-center"
                >
                  <svg className="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 10V3L4 14h7v7l9-11h-7z" />
                  </svg>
                  Оформить Plus
                </button>
              )}
            </div>

            {showSubscriptionPopup && (
              <div className="fixed inset-0 bg-black bg-opacity-75 flex items-center justify-center z-50 p-4">
                <div className="bg-gray-800 p-6 rounded-2xl shadow-xl border border-gray-700 max-w-md w-full animate-pop-in">
                  {!showPaymentForm && (
                    <>
                      <div className="flex justify-between items-center mb-4">
                        <h3 className="text-xl font-bold text-orange-400">Подписка Plus</h3>
                        <button
                          onClick={closeSubscriptionPopup}
                          className="text-gray-400 hover:text-gray-200"
                        >
                          <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                          </svg>
                        </button>
                      </div>

                      <div className="space-y-4">
                        <div className="bg-gray-700 p-4 rounded-lg">
                          <h4 className="font-bold text-lg mb-2 text-white">Преимущества Plus:</h4>
                          <ul className="space-y-2 text-gray-300">
                            <li className="flex items-start">
                              <svg className="w-5 h-5 text-green-400 mr-2 mt-0.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                              </svg>
                              Приоритет в поиске и рекомендациях
                            </li>
                            <li className="flex items-start">
                              <svg className="w-5 h-5 text-green-400 mr-2 mt-0.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                              </svg>
                              Расширенные настройки профиля
                            </li>
                            <li className="flex items-start">
                              <svg className="w-5 h-5 text-green-400 mr-2 mt-0.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                              </svg>
                              Эксклюзивные мероприятия
                            </li>
                          </ul>
                        </div>

                        <div className="flex justify-between items-center bg-gray-700 p-4 rounded-lg">
                          <div>
                            <p className="text-gray-300">Стоимость:</p>
                            <p className="text-2xl font-bold text-orange-400">2,99$ <span className="text-sm text-gray-400">/ месяц</span></p>
                          </div>
                          <button
                            onClick={handleSubscribe}
                            className="bg-gradient-to-r from-orange-500 to-pink-500 hover:from-orange-600 hover:to-pink-600 text-black font-bold py-2 px-6 rounded-lg shadow transition transform hover:scale-105"
                          >
                            Продолжить
                          </button>
                        </div>
                      </div>
                    </>
                  )}
                  {showPaymentForm && subscriptionClientSecret && (
                    <SubscriptionForm
                      clientSecret={subscriptionClientSecret}
                      onSuccess={handlePaymentSuccess}
                      onError={handlePaymentError}
                      onCancel={handlePaymentCancel}
                    />
                  )}
                </div>
              </div>
            )}
          </div>

          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div className="bg-gray-800 p-6 rounded-2xl shadow-lg border border-gray-700">
              <div className="flex justify-between items-center mb-4">
                <h2 className="text-xl font-semibold text-orange-400">Друзья</h2>
                <button className="bg-orange-500 hover:bg-orange-600 text-black px-4 py-2 rounded-lg transition transform hover:scale-105 flex items-center">
                  <svg className="w-5 h-5 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197M13 7a4 4 0 11-8 0 4 4 0 018 0z" />
                  </svg>
                  Найти
                </button>
              </div>

              <div className="text-center py-8">
                <div className="mx-auto w-20 h-20 bg-gray-700 rounded-full flex items-center justify-center mb-4">
                  <svg className="w-10 h-10 text-gray-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1.5} d="M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197M13 7a4 4 0 11-8 0 4 4 0 018 0z" />
                  </svg>
                </div>
                <h3 className="text-lg font-medium text-gray-300 mb-2">У вас пока нет друзей</h3>
                <p className="text-gray-400">Найдите друзей по интересам</p>
              </div>
            </div>

            <div className="bg-gray-800 p-6 rounded-2xl shadow-lg border border-gray-700">
              <div className="flex justify-between items-center mb-4">
                <h2 className="text-xl font-semibold text-orange-400">Мои встречи</h2>
                <div className="flex space-x-2">
                  <button
                    onClick={() => setActiveMeetingTab("subscribed")}
                    className={`px-4 py-1 rounded-full text-sm transition ${
                      activeMeetingTab === "subscribed"
                        ? "bg-orange-500 text-black"
                        : "bg-gray-700 text-orange-200 hover:bg-gray-600"
                    }`}
                  >
                    Я иду
                  </button>
                  <button
                    onClick={() => setActiveMeetingTab("created")}
                    className={`px-4 py-1 rounded-full text-sm transition ${
                      activeMeetingTab === "created"
                        ? "bg-orange-500 text-black"
                        : "bg-gray-700 text-orange-200 hover:bg-gray-600"
                    }`}
                  >
                    Созданные
                  </button>
                </div>
              </div>

              {activeMeetingTab === "subscribed" && (
                <div>
                  {subscribedEvents.length > 0 ? (
                    <ul className="space-y-4 max-h-60 overflow-y-auto pr-2">
                      {[...subscribedEvents]
                        .sort((a, b) => new Date(a.date).getTime() - new Date(b.date).getTime())
                        .map((event) => (
                          <li key={event.id} className="border border-gray-700 rounded-lg p-4 hover:bg-gray-800 transition">
                            <Link href={`/events/${event.id}`} className="block">
                              <h3 className="text-lg font-semibold text-orange-400">{event.title}</h3>
                              <p className="text-gray-300">{event.description}</p>
                              <p className="text-gray-400 text-sm">
                                Дата: {new Date(event.date).toLocaleDateString()}
                              </p>
                            </Link>
                          </li>
                        ))}
                    </ul>
                  ) : (
                    <div className="text-center py-8">
                      <div className="mx-auto w-20 h-20 bg-gray-700 rounded-full flex items-center justify-center mb-4">
                        <svg className="w-10 h-10 text-gray-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1.5} d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
                        </svg>
                      </div>
                      <h3 className="text-lg font-medium text-gray-300 mb-2">Вы не подписаны ни на одну встречу</h3>
                      <p className="text-gray-400 mb-4">Подпишитесь на встречи по своим интересам</p>
                    </div>
                  )}
                </div>
              )}

              {activeMeetingTab === "created" && (
                <div>
                  {createdEvents.length > 0 ? (
                    <ul className="space-y-4 max-h-60 overflow-y-auto pr-2">
                      {[...createdEvents]
                        .sort((a, b) => new Date(a.date).getTime() - new Date(b.date).getTime())
                        .map((event) => (
                          <li key={event.id} className="border border-gray-700 rounded-lg p-4">
                            <Link href={`/events/${event.id}`} className="block">
                              <h3 className="text-lg font-semibold text-orange-400">{event.title}</h3>
                              <p className="text-gray-300">{event.description}</p>
                              <p className="text-gray-400 text-sm">Дата: {new Date(event.date).toLocaleDateString()}</p>
                            </Link>
                          </li>
                        ))}
                    </ul>
                  ) : (
                    <div className="text-center py-8">
                      <div className="mx-auto w-20 h-20 bg-gray-700 rounded-full flex items-center justify-center mb-4">
                        <svg className="w-10 h-10 text-gray-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1.5} d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
                        </svg>
                      </div>
                      <h3 className="text-lg font-medium text-gray-300 mb-2">Вы не создали ни одной встречи</h3>
                      <p className="text-gray-400 mb-4">Создайте встречи по своим интересам</p>
                    </div>
                  )}
                </div>
              )}

              <button
                className="bg-orange-500 hover:bg-orange-600 text-black px-6 py-2 rounded-lg transition transform hover:scale-105 flex items-center mx-auto mt-4"
                onClick={handleCreateMeeting}
              >
                <svg className="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
                </svg>
                Создать встречу
              </button>
            </div>
          </div>

          <div className="bg-gray-800 p-6 rounded-2xl shadow-lg border border-gray-700">
            <h2 className="text-xl font-semibold mb-4 text-orange-400">Настройки профиля</h2>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div>
                <label className="block text-sm font-medium mb-2 text-gray-300">Имя пользователя</label>
                <input
                  value={username}
                  onChange={(e) => setUsername(e.target.value)}
                  className="w-full px-4 py-2 border border-gray-600 rounded-lg bg-gray-700 text-gray-100 focus:outline-none focus:ring-2 focus:ring-orange-500"
                />
              </div>

              <div>
                <label className="block text-sm font-medium mb-2 text-gray-300">Город</label>
                <input
                  value={city}
                  onChange={(e) => setCity(e.target.value)}
                  className="w-full px-4 py-2 border border-gray-600 rounded-lg bg-gray-700 text-gray-100 focus:outline-none focus:ring-2 focus:ring-orange-500"
                />
              </div>

              <div>
                <label className="block text-sm font-medium mb-2 text-gray-300">Возраст</label>
                <input
                  type="number"
                  value={age}
                  onChange={(e) => setAge(e.target.value)}
                  className="w-full px-4 py-2 border border-gray-600 rounded-lg bg-gray-700 text-gray-100 focus:outline-none focus:ring-2 focus:ring-orange-500"
                />
              </div>
            </div>

            <div className="mt-6 flex flex-col sm:flex-row space-y-4 sm:space-y-0 sm:space-x-4">
              <button
                onClick={updateProfile}
                className="bg-orange-500 hover:bg-orange-600 text-black py-3 px-6 rounded-lg transition transform hover:scale-105 flex-1 flex items-center justify-center"
              >
                <svg className="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 7H5a2 2 0 00-2 2v9a2 2 0 002 2h14a2 2 0 002-2V9a2 2 0 00-2-2h-3m-1 4l-3 3m0 0l-3-3m3 3V4" />
                </svg>
                Сохранить изменения
              </button>

              <button
                onClick={handleLogout}
                className="bg-gray-700 hover:bg-gray-600 text-orange-400 py-3 px-6 rounded-lg transition transform hover:scale-105 flex-1 flex items-center justify-center"
              >
                <svg className="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1" />
                </svg>
                Выйти
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}
frontend/app/events/page.tsx
"use client";

import { useState, useEffect, useMemo, ReactNode } from "react";
import axios from "axios";
import EventCard from "../../components/EventCard";
import Link from "next/link";
import Sidebar from "../../components/Sidebar"; // Import the Sidebar component

type Organizer = {
  id: number;
  username: string;
};

type Event = {
  id: number;
  title: string | ReactNode;
  description: string;
  date: string;
  location: string;
  type: string;
  price: number;
  creator?: Organizer;
};

type Filters = {
  type?: string;
  minPrice?: number;
  maxPrice?: number;
  sortBy?: "date" | "price";
  sortOrder?: "asc" | "desc";
};

export default function EventsPage() {
  const [events, setEvents] = useState<Event[]>([]);
  const [filters, setFilters] = useState<Filters>({});
  const [searchTerm, setSearchTerm] = useState("");
  const [loading, setLoading] = useState(true);
  const [showSubscribed, setShowSubscribed] = useState(false);
  const [showCreated, setShowCreated] = useState(false);

  useEffect(() => {
    const fetchEvents = async () => {
      setLoading(true);
      try {
        if (showSubscribed || showCreated) {
          const res = await axios.get("http://localhost:3000/events/mine", { withCredentials: true });
          let filteredEvents: Event[] = [];
          if (showSubscribed && showCreated) {
            const combined = [...res.data.subscribedEvents, ...res.data.createdEvents];
            const uniqueMap = new Map<number, Event>();
            combined.forEach((ev: Event) => {
              uniqueMap.set(ev.id, ev);
            });
            filteredEvents = Array.from(uniqueMap.values());
          } else if (showSubscribed) {
            filteredEvents = res.data.subscribedEvents;
          } else if (showCreated) {
            filteredEvents = res.data.createdEvents;
          }
          setEvents(filteredEvents);
        } else {
          const query = new URLSearchParams();
          if (filters.type) query.append("type", filters.type);
          if (filters.minPrice) query.append("minPrice", filters.minPrice.toString());
          if (filters.maxPrice) query.append("maxPrice", filters.maxPrice.toString());
          if (filters.sortBy) query.append("sortBy", filters.sortBy);
          if (filters.sortOrder) query.append("sortOrder", filters.sortOrder);

          const res = await axios.get("http://localhost:3000/events", { params: query, withCredentials: true });
          setEvents(res.data);
        }
      } catch (error) {
        console.error("Error fetching events:", error);
      } finally {
        setLoading(false);
      }
    };

    fetchEvents();
  }, [filters, showSubscribed, showCreated]);

  const filteredEvents = useMemo(() => {
    if (!searchTerm) return events;

    const lowerSearch = searchTerm.toLowerCase();

    return events.filter(event => {
      const inTitle = typeof event.title === "string" && event.title.toLowerCase().includes(lowerSearch);
      const inCreator = event.creator?.username.toLowerCase().includes(lowerSearch);
      return inTitle || inCreator;
    });
  }, [events, searchTerm]);

  const highlightMatch = (text: string, highlight: string) => {
    if (!highlight) return text;
    const regex = new RegExp(`(${highlight})`, "gi");
    const parts = text.split(regex);
    return parts.map((part, i) =>
      regex.test(part) ? <mark key={i} className="bg-orange-100 text-orange-800">{part}</mark> : part
    );
  };

  const eventTypes = [
    { value: "regular", label: "Обычные", color: "bg-blue-500" },
    { value: "premium", label: "Премиум", color: "bg-purple-500" },
    { value: "online", label: "Онлайн", color: "bg-green-500" },
  ];

  return (
    <div className="flex min-h-screen bg-gradient-to-b from-gray-900 to-black">
      <Sidebar />
      <div className="flex-1 px-4 py-8 text-white md:ml-56">
        <div className="max-w-7xl mx-auto p-4 space-y-8">
          <div className="text-center py-12">
            <h1 className="text-5xl font-bold mb-6 bg-clip-text text-transparent bg-gradient-to-r from-orange-400 to-pink-600">
              Найди свои идеальные мероприятия
            </h1>
            <p className="text-xl text-gray-300 max-w-2xl mx-auto">
              Открой для себя уникальные события, которые вдохновляют и объединяют
            </p>
          </div>

          <div className="flex flex-col lg:flex-row gap-8">
            <div className="w-full lg:w-1/4 bg-gray-800 p-6 rounded-xl shadow-lg border border-gray-700 space-y-6">
              <h2 className="text-2xl font-bold mb-2 text-orange-400">Фильтры</h2>
              <div className="relative">
                <input
                  type="text"
                  placeholder="Поиск мероприятий..."
                  className="w-full p-3 pl-10 rounded-lg bg-gray-700 border border-gray-600 focus:outline-none focus:ring-2 focus:ring-orange-500 text-white placeholder-gray-400"
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                />
                <svg
                  className="absolute left-3 top-3.5 h-5 w-5 text-gray-400"
                  fill="none"
                  viewBox="0 0 24 24"
                  stroke="currentColor"
                >
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    strokeWidth={2}
                    d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"
                  />
                </svg>
              </div>

              <div className="space-y-2">
                <h3 className="text-lg font-semibold text-gray-300">Тип мероприятия</h3>
                <div className="space-y-2">
                  {eventTypes.map((type) => (
                    <button
                      key={type.value}
                      className={`w-full text-left px-4 py-2 rounded-lg transition-all ${filters.type === type.value ? `${type.color} text-white` : 'bg-gray-700 hover:bg-gray-600 text-gray-200'}`}
                      onClick={() => setFilters({ ...filters, type: filters.type === type.value ? undefined : type.value })}
                    >
                      {type.label}
                    </button>
                  ))}
                </div>
              </div>
              <div className="space-y-2">
                <h3 className="text-lg font-semibold text-gray-300">Ценовой диапазон</h3>
                <div className="flex gap-3">
                  <input
                    type="number"
                    placeholder="От"
                    className="w-full p-2 rounded-lg bg-gray-700 border border-gray-600 focus:outline-none focus:ring-2 focus:ring-orange-500 text-white"
                    onChange={(e) => setFilters({ ...filters, minPrice: Number(e.target.value) })}
                  />
                  <input
                    type="number"
                    placeholder="До"
                    className="w-full p-2 rounded-lg bg-gray-700 border border-gray-600 focus:outline-none focus:ring-2 focus:ring-orange-500 text-white"
                    onChange={(e) => setFilters({ ...filters, maxPrice: Number(e.target.value) })}
                  />
                </div>
              </div>

              <div className="space-y-2">
                <h3 className="text-lg font-semibold text-gray-300">Сортировка</h3>
                <select
                  className="w-full p-2 rounded-lg bg-gray-700 border border-gray-600 focus:outline-none focus:ring-2 focus:ring-orange-500 text-white"
                  onChange={(e) => {
                    const [sortBy, sortOrder] = e.target.value.split("-");
                    setFilters({ ...filters, sortBy: sortBy as any, sortOrder: sortOrder as any });
                  }}
                >
                  <option value="">По умолчанию</option>
                  <option value="date-asc">Дата (по возрастанию)</option>
                  <option value="date-desc">Дата (по убыванию)</option>
                  <option value="price-asc">Цена (по возрастанию)</option>
                  <option value="price-desc">Цена (по убыванию)</option>
                </select>
              </div>

              <div className="space-y-2">
                <h3 className="text-lg font-semibold text-gray-300">Мои фильтры</h3>
                <div className="flex flex-col space-y-2">
                  <label className="inline-flex items-center cursor-pointer">
                    <input
                      type="checkbox"
                      className="form-checkbox h-5 w-5 text-orange-500"
                      checked={showSubscribed}
                      onChange={() => setShowSubscribed(!showSubscribed)}
                    />
                    <span className="ml-2 text-gray-300">Я иду</span>
                  </label>
                  <label className="inline-flex items-center cursor-pointer">
                    <input
                      type="checkbox"
                      className="form-checkbox h-5 w-5 text-orange-500"
                      checked={showCreated}
                      onChange={() => setShowCreated(!showCreated)}
                    />
                    <span className="ml-2 text-gray-300">Созданные</span>
                  </label>
                </div>
              </div>

              <button
                className="w-full py-2 px-4 bg-gray-700 hover:bg-gray-600 text-orange-400 rounded-lg transition-colors font-medium"
                onClick={() => {
                  setFilters({});
                  setSearchTerm("");
                  setShowSubscribed(false);
                  setShowCreated(false);
                }}
              >
                Сбросить фильтры
              </button>
            </div>

            <div className="w-full lg:w-3/4">
              <div className="flex justify-between items-center mb-6">
                <h2 className="text-3xl font-bold text-white">
                  Доступные мероприятия
                  {filteredEvents.length > 0 && (
                    <span className="ml-2 text-orange-400 text-xl">
                      ({filteredEvents.length})
                    </span>
                  )}
                </h2>
              </div>

              {loading ? (
                <div className="flex justify-center items-center h-64">
                  <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-orange-500"></div>
                </div>
              ) : filteredEvents.length === 0 ? (
                <div className="text-center py-16">
                  <div className="mx-auto w-24 h-24 bg-gray-800 rounded-full flex items-center justify-center mb-4">
                    <svg
                      className="w-12 h-12 text-orange-500"
                      fill="none"
                      stroke="currentColor"
                      viewBox="0 0 24 24"
                    >
                      <path
                        strokeLinecap="round"
                        strokeLinejoin="round"
                        strokeWidth={1.5}
                        d="M9.172 16.172a4 4 0 015.656 0M9 10h.01M15 10h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"
                      />
                    </svg>
                  </div>
                  <h3 className="text-xl font-medium text-gray-300 mb-2">
                    Мероприятий не найдено
                  </h3>
                  <p className="text-gray-400 max-w-md mx-auto">
                    Попробуйте изменить параметры поиска или сбросить фильтры
                  </p>
                </div>
              ) : (
                <div className="grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-6">
                  {filteredEvents.map((event) => (
                    <EventCard
                      key={event.id}
                      event={{
                        ...event,
                        id: event.id,
                        imageUrl: (event as any).mainPhotoUrl,
                        title: typeof event.title === "string" ? highlightMatch(event.title, searchTerm) : event.title,
                        creator: event.creator
                          ? {
                              ...event.creator,
                              username: highlightMatch(event.creator.username, searchTerm) as unknown as string,
                            }
                          : undefined,
                      }}
                    />
                  ))}
                </div>
              )}
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}

frontend/app/events/[id]/page.tsx

"use client";

import { useState, useEffect, useRef } from "react";
import { useRouter, useParams } from "next/navigation";
import axios from "axios";
import YandexMap from "../../../components/YandexMap";
import Sidebar from "../../../components/Sidebar";
import {
  FiArrowLeft,
  FiArrowRight,
  FiEdit2,
  FiCalendar,
  FiUsers,
  FiTag,
  FiDollarSign,
  FiUser,
} from "react-icons/fi";

export default function EventDetailPage() {
  const router = useRouter();
  const params = useParams();
  const eventId = params?.id;

  const [event, setEvent] = useState<any>(null);
  const [user, setUser] = useState<any>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [currentPhotoIndex, setCurrentPhotoIndex] = useState(0);
  const [isGoing, setIsGoing] = useState(false);
  const [subscribing, setSubscribing] = useState(false);
  const [subscriptionError, setSubscriptionError] = useState<string | null>(null);

  const photosContainerRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    if (!eventId) return;

    const fetchData = async () => {
      setLoading(true);
      try {
        const [eventRes, userRes] = await Promise.all([
          axios.get(`http://localhost:3000/events/${eventId}`, {
            withCredentials: true,
          }),
          axios.get("http://localhost:3000/users/me", {
            withCredentials: true,
          }),
        ]);
        setEvent(eventRes.data);
        setUser(userRes.data);
      } catch (err: any) {
        setError(err.response?.data?.message || "Ошибка загрузки данных");
      } finally {
        setLoading(false);
      }
    };

    fetchData();
  }, [eventId]);

  useEffect(() => {
    if (event?.subscriptions && user) {
      const subscribed = event.subscriptions.some(
        (sub: any) => sub.user && sub.user.id === user.sub
      );
      setIsGoing(subscribed);
    }
  }, [event?.subscriptions, user]);

  const handlePrevPhoto = () => {
    setCurrentPhotoIndex((prev) =>
      prev === 0 ? (event?.photos?.length || 1) - 1 : prev - 1
    );
  };

  const handleNextPhoto = () => {
    setCurrentPhotoIndex((prev) =>
      prev === (event?.photos?.length || 1) - 1 ? 0 : prev + 1
    );
  };

  const handleSubscribe = async () => {
    setSubscriptionError(null);
    setSubscribing(true);
    try {
      await axios.post(
        `http://localhost:3000/events/${event.id}/subscribe`,
        {},
        { withCredentials: true }
      );
      setIsGoing(true);
    } catch (error: any) {
      setSubscriptionError(error.response?.data?.message || "Ошибка подписки");
    } finally {
      setSubscribing(false);
    }
  };

  if (loading) {
    return (
      <div className="flex min-h-screen items-center justify-center text-white bg-gradient-to-b from-gray-900 to-black">
        <div className="animate-pulse text-2xl">Загрузка...</div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="flex min-h-screen items-center justify-center text-white bg-gradient-to-b from-gray-900 to-black">
        <div className="text-red-500 text-xl">{error}</div>
      </div>
    );
  }

  if (!event) {
    return (
      <div className="flex min-h-screen items-center justify-center text-white bg-gradient-to-b from-gray-900 to-black">
        <div className="text-xl">Мероприятие не найдено</div>
      </div>
    );
  }

  const isCreator = Number(user?.sub) === Number(event.creator?.id);
  const availableSeats =
    event.maxParticipants - (event.subscriptions?.length || 0);
  const isButtonDisabled = availableSeats <= 0 || subscribing || isGoing;

  return (
    <div className="flex min-h-screen bg-gradient-to-b from-gray-900 to-black text-white">
      <Sidebar />
      <div className="flex-1 px-4 py-12 md:ml-56">
        <div className="max-w-7xl mx-auto">
          <button
            onClick={() => router.back()}
            className="mb-8 flex items-center text-gray-300 hover:text-white transition"
          >
            <FiArrowLeft className="mr-2" /> Назад
          </button>

          <h1 className="text-4xl md:text-5xl font-bold mb-8 text-transparent bg-clip-text bg-gradient-to-r from-orange-400 to-orange-600">
            {event.title}
          </h1>

          {event.photos && event.photos.length > 0 && (
            <div className="relative mb-12 rounded-xl overflow-hidden shadow-2xl">
              <div
                ref={photosContainerRef}
                className="relative h-96 w-full bg-gray-800 flex items-center justify-center"
              >
                <img
                  src={event.photos[currentPhotoIndex].url}
                  alt={`Photo ${event.photos[currentPhotoIndex].id}`}
                  className="h-full w-full object-cover"
                />

                {event.photos.length > 1 && (
                  <>
                    <button
                      onClick={handlePrevPhoto}
                      className="absolute left-4 top-1/2 -translate-y-1/2 bg-black/50 hover:bg-black/70 rounded-full p-3 transition"
                      aria-label="Previous photo"
                    >
                      <FiArrowLeft className="text-white text-xl" />
                    </button>
                    <button
                      onClick={handleNextPhoto}
                      className="absolute right-4 top-1/2 -translate-y-1/2 bg-black/50 hover:bg-black/70 rounded-full p-3 transition"
                      aria-label="Next photo"
                    >
                      <FiArrowRight className="text-white text-xl" />
                    </button>
                  </>
                )}

                {event.photos.length > 1 && (
                  <div className="absolute bottom-4 left-1/2 -translate-x-1/2 flex space-x-2">
                    {event.photos.map((_: any, index: number) => (
                      <button
                        key={index}
                        onClick={() => setCurrentPhotoIndex(index)}
                        className={`w-3 h-3 rounded-full transition ${
                          index === currentPhotoIndex
                            ? "bg-orange-500"
                            : "bg-white/50"
                        }`}
                        aria-label={`Go to photo ${index + 1}`}
                      />
                    ))}
                  </div>
                )}
              </div>
            </div>
          )}

          <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
            <div className="lg:col-span-2 space-y-8">
              <div className="bg-gray-800/50 backdrop-blur-sm p-6 rounded-xl shadow-lg">
                <h2 className="text-2xl font-semibold mb-4 text-orange-400">
                  Описание
                </h2>
                <p className="text-gray-300 leading-relaxed">
                  {event.description}
                </p>
              </div>

              <div className="bg-gray-800/50 backdrop-blur-sm p-6 rounded-xl shadow-lg">
                <h2 className="text-2xl font-semibold mb-6 text-orange-400">
                  Детали мероприятия
                </h2>

                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                  <div className="flex items-start space-x-4">
                    <FiCalendar className="text-orange-400 text-xl mt-1" />
                    <div>
                      <h3 className="text-gray-400 text-sm">Дата и время</h3>
                      <p className="text-white">
                        {new Date(event.date).toLocaleString("ru-RU", {
                          day: "numeric",
                          month: "long",
                          year: "numeric",
                          hour: "2-digit",
                          minute: "2-digit",
                        })}
                      </p>
                    </div>
                  </div>

                  <div className="flex items-start space-x-4">
                    <FiUsers className="text-orange-400 text-xl mt-1" />
                    <div>
                      <h3 className="text-gray-400 text-sm">Участники</h3>
                      <p className="text-white">{event.maxParticipants} человек</p>
                    </div>
                  </div>

                  <div className="flex items-start space-x-4">
                    <FiTag className="text-orange-400 text-xl mt-1" />
                    <div>
                      <h3 className="text-gray-400 text-sm">Тип мероприятия</h3>
                      <p className="text-white capitalize">{event.type}</p>
                    </div>
                  </div>

                  <div className="flex items-start space-x-4">
                    <FiDollarSign className="text-orange-400 text-xl mt-1" />
                    <div>
                      <h3 className="text-gray-400 text-sm">Цена</h3>
                      <p className="text-white">{event.price} ₽</p>
                    </div>
                  </div>
                </div>
              </div>
            </div>

            <div className="space-y-8">
              <div className="bg-gray-800/50 backdrop-blur-sm p-6 rounded-xl shadow-lg">
                <h2 className="text-2xl font-semibold mb-6 text-orange-400">
                  Организатор
                </h2>
                <div className="flex items-center space-x-4">
                  <div className="w-16 h-16 rounded-full bg-gray-700 flex items-center justify-center">
                    <FiUser className="text-2xl text-gray-400" />
                  </div>
                  <div>
                    <h3 className="text-white font-medium">
                      {event.creator?.username || "Неизвестный организатор"}
                    </h3>
                    <p className="text-gray-400 text-sm">
                      Организатор мероприятия
                    </p>
                  </div>
                </div>
              </div>

              {event.latitude && event.longitude && (
                <div className="bg-gray-800/50 backdrop-blur-sm p-6 rounded-xl shadow-lg">
                  <h2 className="text-2xl font-semibold mb-4 text-orange-400">
                    Место проведения
                  </h2>
                  <div className="h-64 rounded-lg overflow-hidden">
                    <YandexMap
                      initialLatitude={event.latitude}
                      initialLongitude={event.longitude}
                    />
                  </div>
                </div>
              )}
            </div>
          </div>

          {isCreator ? (
            <div className="mt-12 flex justify-end">
              <button
                onClick={() => router.push(`/events/${eventId}/edit`)}
                className="px-6 py-3 bg-gradient-to-r from-orange-500 to-orange-600 text-white rounded-lg hover:from-orange-600 hover:to-orange-700 transition flex items-center shadow-lg"
              >
                <FiEdit2 className="mr-2" />
                Редактировать мероприятие
              </button>
            </div>
          ) : (
            <div className="mt-12 flex justify-end flex-col items-end space-y-2">
              <button
                onClick={handleSubscribe}
                disabled={isButtonDisabled}
                className={`px-6 py-3 rounded-lg text-white shadow-lg transition flex items-center justify-center ${
                  isButtonDisabled
                    ? "bg-gray-600 cursor-not-allowed opacity-50"
                    : "bg-gradient-to-r from-orange-500 to-orange-600 hover:from-orange-600 hover:to-orange-700"
                }`}
              >
                {isGoing ? "Вы уже идёте" : subscribing ? "Подписка..." : "Я иду!"}
              </button>
              {subscriptionError && (
                <p className="text-red-500 text-sm">{subscriptionError}</p>
              )}
              <p className="text-gray-400 text-sm">
                Свободных мест: {availableSeats}
              </p>
            </div>
          )}
        </div>
      </div>
    </div>
  );
}
frontend/app/events/[id]/edit/page.tsx

"use client";

import { useState, useEffect, useCallback, useRef } from "react";
import { useRouter, useParams } from "next/navigation";
import axios from "axios";
import YandexMap from "../../../../components/YandexMap";
import { Toaster, toast } from "react-hot-toast";
import Sidebar from "../../../../components/Sidebar"; // Import the Sidebar component

export default function EditEventPage() {
  const router = useRouter();
  const params = useParams();
  const eventId = params?.id;

  const [title, setTitle] = useState("");
  const [description, setDescription] = useState("");
  const [date, setDate] = useState("");
  const [maxParticipants, setMaxParticipants] = useState(50);
  const [type, setType] = useState("regular");
  const [price, setPrice] = useState(0);
  const [photoUrls, setPhotoUrls] = useState<string[]>([]);
  const [latitude, setLatitude] = useState<number | null>(null);
  const [longitude, setLongitude] = useState<number | null>(null);
  const [loading, setLoading] = useState(true);
  const [uploading, setUploading] = useState(false);
  const [userRole, setUserRole] = useState<string | null>(null);
  const [isPlusSubscriber, setIsPlusSubscriber] = useState(false);
  const [isCreator, setIsCreator] = useState(false);

  const fileInputRef = useRef<HTMLInputElement | null>(null);
  const dragCounter = useRef(0);
  const [dragging, setDragging] = useState(false);

  useEffect(() => {
    if (!eventId) return;

    const fetchData = async () => {
      setLoading(true);
      try {
        const [eventRes, userRes] = await Promise.all([
          axios.get(`http://localhost:3000/events/${eventId}`, { withCredentials: true }),
          axios.get("http://localhost:3000/users/me", { withCredentials: true }),
        ]);
        const eventData = eventRes.data;
        let userData = userRes.data;
        
        if (!userData.sub && userData.id) {
          userData = { ...userData, sub: userData.id };
        }

        setTitle(eventData.title || "");
        setDescription(eventData.description || "");
        setDate(eventData.date ? new Date(eventData.date).toISOString().slice(0,16) : "");
        setMaxParticipants(eventData.maxParticipants || 50);
        setType(eventData.type || "regular");
        setPrice(eventData.price || 0);
        setPhotoUrls(eventData.photos?.map((p: any) => p.url) || []);
        setLatitude(eventData.latitude || null);
        setLongitude(eventData.longitude || null);
        setUserRole(userData.role);
        setIsPlusSubscriber(userData.isPlusSubscriber || false);
        setIsCreator(Number(userData.sub) === Number(eventData.creator?.id));

        if (Number(userData.sub) !== Number(eventData.creator?.id)) {
          toast.error("У вас нет прав на редактирование этого мероприятия");
        }
      } catch (err: any) {
        toast.error(err.response?.data?.message || "Ошибка загрузки данных");
      } finally {
        setLoading(false);
      }
    };

    fetchData();
  }, [eventId]);

  const maxPhotos = (userRole === "organizer" || isPlusSubscriber) ? 7 : 3;

  const uploadFiles = useCallback(
    async (files: FileList) => {
      if (photoUrls.length + files.length > maxPhotos) {
        toast.error(`Максимальное количество фото: ${maxPhotos}`);
        return;
      }
      setUploading(true);
      try {
        const uploadedUrls: string[] = [];
        for (let i = 0; i < files.length; i++) {
          const formData = new FormData();
          formData.append("file", files[i]);
          const res = await axios.post("http://localhost:3000/events/upload", formData, {
            headers: { "Content-Type": "multipart/form-data" },
            withCredentials: true,
          });
          uploadedUrls.push(res.data.url);
        }
        setPhotoUrls(prev => [...prev, ...uploadedUrls]);
        toast.success(`Загружено ${files.length} фото`);
      } catch (err) {
        console.error("Ошибка загрузки файла", err);
        toast.error("Ошибка загрузки файла");
      } finally {
        setUploading(false);
      }
    },
    [photoUrls.length, maxPhotos]
  );

  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (!e.target.files || e.target.files.length === 0) return;
    uploadFiles(e.target.files);
    if (fileInputRef.current) {
      fileInputRef.current.value = "";
    }
  };

  const handleDragEnter = (e: React.DragEvent<HTMLDivElement>) => {
    e.preventDefault();
    e.stopPropagation();
    dragCounter.current++;
    if (e.dataTransfer.items && e.dataTransfer.items.length > 0) {
      setDragging(true);
    }
  };

  const handleDragLeave = (e: React.DragEvent<HTMLDivElement>) => {
    e.preventDefault();
    e.stopPropagation();
    dragCounter.current--;
    if (dragCounter.current === 0) {
      setDragging(false);
    }
  };

  const handleDragOver = (e: React.DragEvent<HTMLDivElement>) => {
    e.preventDefault();
    e.stopPropagation();
  };

  const handleDrop = (e: React.DragEvent<HTMLDivElement>) => {
    e.preventDefault();
    e.stopPropagation();
    setDragging(false);
    dragCounter.current = 0;
    if (e.dataTransfer.files && e.dataTransfer.files.length > 0) {
      uploadFiles(e.dataTransfer.files);
      e.dataTransfer.clearData();
    }
  };

  const removePhoto = (index: number) => {
    setPhotoUrls(prev => {
      const newPhotos = [...prev];
      newPhotos.splice(index, 1);
      return newPhotos;
    });
    toast.success("Фото удалено");
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setLoading(true);

    if (!isCreator) {
      toast.error("У вас нет прав на редактирование этого мероприятия");
      setLoading(false);
      return;
    }

    if (userRole === "user" && !isPlusSubscriber) {
      if (type === "premium") {
        toast.error('Мероприятия типа "Премиум" доступны только для пользователей с подпиской Plus');
        setLoading(false);
        return;
      }
      if (price > 0) {
        toast.error('Платные мероприятия доступны только для пользователей с подпиской Plus');
        setLoading(false);
        return;
      }
    }

    try {
      const response = await axios.put(
        `http://localhost:3000/events/${eventId}`,
        {
          title,
          description,
          date,
          maxParticipants,
          type,
          price,
          photos: photoUrls,
          latitude,
          longitude,
        },
        { withCredentials: true }
      );

      toast.success("Мероприятие успешно обновлено!");
      setTimeout(() => {
        router.push(`/events/${eventId}`);
      }, 1500);
    } catch (err: any) {
      toast.error(err.response?.data?.message || "Ошибка при обновлении мероприятия");
      setLoading(false);
    }
  };

  if (loading && !isCreator) {
    return (
      <div className="flex min-h-screen items-center justify-center text-white bg-gradient-to-b from-black to-gray-900">
        <div className="animate-pulse flex flex-col items-center">
          <div className="w-16 h-16 border-4 border-orange-500 border-t-transparent rounded-full animate-spin mb-4"></div>
          <p>Загрузка...</p>
        </div>
      </div>
    );
  }

  if (!isCreator) {
    return (
      <div className="flex min-h-screen items-center justify-center text-white bg-gradient-to-b from-black to-gray-900 p-4">
        <div className="max-w-md w-full bg-gray-800 p-6 rounded-xl text-center">
          <h2 className="text-2xl font-bold text-orange-500 mb-4">Доступ запрещен</h2>
          <p className="mb-6">У вас нет прав для редактирования этого мероприятия</p>
          <button
            onClick={() => router.push("/events")}
            className="px-6 py-2 bg-orange-500 hover:bg-orange-600 rounded-lg transition-colors"
          >
            Вернуться к мероприятиям
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="flex min-h-screen bg-gradient-to-b from-black to-gray-900 text-white">
      <Sidebar />
      <div className="flex-1 px-4 py-8 md:ml-56">
        <Toaster position="top-center" toastOptions={{
          style: {
            background: '#1f2937',
            color: '#fff',
            border: '1px solid #f97316',
          }
        }} />
        
        <div className="max-w-4xl mx-auto bg-gray-800 p-8 rounded-2xl shadow-lg">
          <h1 className="text-3xl font-bold mb-6 text-orange-500">Редактировать мероприятие</h1>
          
          <form onSubmit={handleSubmit} className="space-y-6">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div>
                <label className="block mb-2 font-medium">Название *</label>
                <input
                  type="text"
                  required
                  value={title}
                  onChange={(e) => setTitle(e.target.value)}
                  className="w-full p-3 border border-gray-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-orange-500 bg-gray-700 text-white"
                  placeholder="Введите название"
                />
              </div>
              
              <div>
                <label className="block mb-2 font-medium">Дата и время *</label>
                <input
                  type="datetime-local"
                  required
                  value={date}
                  onChange={(e) => setDate(e.target.value)}
                  className="w-full p-3 border border-gray-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-orange-500 bg-gray-700 text-white"
                />
              </div>
            </div>
            
            <div>
              <label className="block mb-2 font-medium">Описание</label>
              <textarea
                value={description}
                onChange={(e) => setDescription(e.target.value)}
                className="w-full p-3 border border-gray-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-orange-500 bg-gray-700 text-white"
                rows={5}
                placeholder="Расскажите о вашем мероприятии"
              />
            </div>
            
            <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
              <div>
                <label className="block mb-2 font-medium">Макс. участников</label>
                <input
                  type="number"
                  min={1}
                  max={1000}
                  value={maxParticipants}
                  onChange={(e) => setMaxParticipants(Number(e.target.value))}
                  className="w-full p-3 border border-gray-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-orange-500 bg-gray-700 text-white"
                />
              </div>
              
              <div>
                <label className="block mb-2 font-medium">Тип</label>
                <select
                  value={type}
                  onChange={(e) => setType(e.target.value)}
                  className="w-full p-3 border border-gray-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-orange-500 bg-gray-700 text-white"
                  disabled={userRole === "user" && !isPlusSubscriber}
                >
                  <option value="regular">Обычные</option>
                  <option value="online">Онлайн</option>
                  {userRole !== "user" && <option value="premium">Премиум</option>}
                </select>
              </div>
              
              <div>
                <label className="block mb-2 font-medium">Цена (руб)</label>
                <input
                  type="number"
                  min={0}
                  value={price}
                  onChange={(e) => setPrice(Number(e.target.value))}
                  className="w-full p-3 border border-gray-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-orange-500 bg-gray-700 text-white"
                  disabled={userRole === "user" && !isPlusSubscriber}
                />
              </div>
            </div>
            
            <div>
              <label className="block mb-2 font-medium">Место проведения</label>
              <div className="border border-gray-600 rounded-lg overflow-hidden">
                <YandexMap 
                  onLocationSelect={(lat, lon) => { 
                    setLatitude(lat); 
                    setLongitude(lon); 
                    toast.success("Место выбрано");
                  }} 
                  initialLatitude={latitude || undefined} 
                  initialLongitude={longitude || undefined} 
                />
              </div>
              {latitude && longitude && (
                <p className="mt-2 text-gray-400">
                  Координаты: {latitude.toFixed(6)}, {longitude.toFixed(6)}
                </p>
              )}
            </div>
            
            <div>
              <label className="block mb-2 font-medium">Фото мероприятия ({photoUrls.length}/{maxPhotos})</label>
              <div
                onDragEnter={handleDragEnter}
                onDragLeave={handleDragLeave}
                onDragOver={handleDragOver}
                onDrop={handleDrop}
                className={`w-full p-8 border-2 border-dashed rounded-lg cursor-pointer transition-all ${
                  dragging ? "border-orange-400 bg-orange-900/30" : "border-gray-600 hover:border-orange-500"
                }`}
                onClick={() => fileInputRef.current?.click()}
              >
                <div className="text-center">
                  {uploading ? (
                    <div className="flex flex-col items-center">
                      <div className="w-8 h-8 border-2 border-orange-500 border-t-transparent rounded-full animate-spin mb-2"></div>
                      <p>Загрузка...</p>
                    </div>
                  ) : (
                    <>
                      <svg className="w-12 h-12 mx-auto text-orange-500 mb-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12"></path>
                      </svg>
                      <p className="mb-1">Перетащите фото сюда или кликните для выбора</p>
                      <p className="text-sm text-gray-400">Максимум {maxPhotos} фото</p>
                    </>
                  )}
                </div>
                <input
                  ref={fileInputRef}
                  type="file"
                  accept="image/*"
                  multiple
                  onChange={handleFileChange}
                  className="hidden"
                  disabled={uploading}
                />
              </div>
              
              {photoUrls.length > 0 && (
                <div className="mt-4 grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 gap-3">
                  {photoUrls.map((url, index) => (
                    <div key={index} className="relative group">
                      <img
                        src={url}
                        alt={`Фото ${index + 1}`}
                        className="w-full h-32 object-cover rounded-lg border border-gray-600 group-hover:border-orange-500 transition-colors"
                      />
                      <button
                        type="button"
                        onClick={() => removePhoto(index)}
                        className="absolute top-2 right-2 bg-red-600 text-white rounded-full w-6 h-6 flex items-center justify-center opacity-0 group-hover:opacity-100 transition-opacity"
                        title="Удалить фото"
                      >
                        ×
                      </button>
                    </div>
                  ))}
                </div>
              )}
            </div>
            
            <div className="pt-4 flex justify-end space-x-4">
              <button
                type="button"
                onClick={() => router.push(`/events/${eventId}`)}
                className="px-6 py-2 border border-gray-600 rounded-lg hover:bg-gray-700 transition-colors"
                disabled={loading || uploading}
              >
                Отмена
              </button>
              <button
                type="submit"
                disabled={loading || uploading}
                className="px-6 py-2 bg-orange-500 text-white rounded-lg hover:bg-orange-600 disabled:opacity-50 transition-colors flex items-center"
              >
                {loading ? (
                  <>
                    <svg className="animate-spin -ml-1 mr-2 h-4 w-4 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                      <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                      <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                  </svg>
                  Сохранение...
                </>
              ) : "Сохранить изменения"}
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>
  );
}
frontend/app/events/create/page.tsx
"use client";

import { useState, useEffect, useCallback, useRef } from "react";
import { useRouter } from "next/navigation";
import axios from "axios";
import YandexMap from "../../../components/YandexMap";
import { Toaster, toast } from "react-hot-toast";
import Link from "next/link";
import Sidebar from "../../../components/Sidebar"; // Import the Sidebar component

type Organizer = {
  id: number;
  username: string;
};

type Event = {
  id: number;
  title: string;
  description: string;
  date: string;
  location: string;
  type: string;
  price: number;
  creator?: Organizer;
};

export default function CreateEventPage() {
  const router = useRouter();

  const [title, setTitle] = useState("");
  const [description, setDescription] = useState("");
  const [date, setDate] = useState("");
  const [maxParticipants, setMaxParticipants] = useState(50);
  const [type, setType] = useState("regular");
  const [price, setPrice] = useState(0);
  const [photoUrls, setPhotoUrls] = useState<string[]>([]);
  const [latitude, setLatitude] = useState<number | null>(null);
  const [longitude, setLongitude] = useState<number | null>(null);
  const [loading, setLoading] = useState(true);
  const [uploading, setUploading] = useState(false);
  const [userRole, setUserRole] = useState<string | null>(null);
  const [isPlusSubscriber, setIsPlusSubscriber] = useState(false);

  const fileInputRef = useRef<HTMLInputElement | null>(null);
  const dragCounter = useRef(0);
  const [dragging, setDragging] = useState(false);

  useEffect(() => {
    const fetchUser = async () => {
      try {
        const res = await axios.get("http://localhost:3000/users/me", {
          withCredentials: true,
        });

        setUserRole(res.data.role);
        setIsPlusSubscriber(res.data.isPlusSubscriber || false);
        setLoading(false);
      } catch {
        toast.error("Требуется авторизация");
        router.push("/login?reason=unauthorized");
      }
    };

    fetchUser();
  }, [router]);

  useEffect(() => {
    if (userRole && !["user", "admin", "moderator", "organizer"].includes(userRole)) {
      toast.error("Недостаточно прав");
      router.push("/login?reason=unauthorized");
    }
  }, [userRole, router]);

  const maxPhotos = (userRole === "organizer" || isPlusSubscriber) ? 7 : 3;

  const uploadFiles = useCallback(
    async (files: FileList) => {
      if (photoUrls.length + files.length > maxPhotos) {
        toast.error(`Максимальное количество фото: ${maxPhotos}`);
        return;
      }
      setUploading(true);
      try {
        const uploadedUrls: string[] = [];
        for (let i = 0; i < files.length; i++) {
          const formData = new FormData();
          formData.append("file", files[i]);
          const res = await axios.post("http://localhost:3000/events/upload", formData, {
            headers: { "Content-Type": "multipart/form-data" },
            withCredentials: true,
          });
          uploadedUrls.push(res.data.url);
        }
        setPhotoUrls(prev => [...prev, ...uploadedUrls]);
        toast.success(`Загружено ${files.length} фото`);
      } catch (err) {
        console.error("Ошибка загрузки файла", err);
        toast.error("Ошибка загрузки файла");
      } finally {
        setUploading(false);
      }
    },
    [photoUrls.length, maxPhotos]
  );

  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (!e.target.files || e.target.files.length === 0) return;
    uploadFiles(e.target.files);
    if (fileInputRef.current) {
      fileInputRef.current.value = "";
    }
  };

  const handleDragEnter = (e: React.DragEvent<HTMLDivElement>) => {
    e.preventDefault();
    e.stopPropagation();
    dragCounter.current++;
    if (e.dataTransfer.items && e.dataTransfer.items.length > 0) {
      setDragging(true);
    }
  };

  const handleDragLeave = (e: React.DragEvent<HTMLDivElement>) => {
    e.preventDefault();
    e.stopPropagation();
    dragCounter.current--;
    if (dragCounter.current === 0) {
      setDragging(false);
    }
  };

  const handleDragOver = (e: React.DragEvent<HTMLDivElement>) => {
    e.preventDefault();
    e.stopPropagation();
  };

  const handleDrop = (e: React.DragEvent<HTMLDivElement>) => {
    e.preventDefault();
    e.stopPropagation();
    setDragging(false);
    dragCounter.current = 0;
    if (e.dataTransfer.files && e.dataTransfer.files.length > 0) {
      uploadFiles(e.dataTransfer.files);
      e.dataTransfer.clearData();
    }
  };

  const removePhoto = (index: number) => {
    setPhotoUrls(prev => {
      const newPhotos = [...prev];
      newPhotos.splice(index, 1);
      return newPhotos;
    });
    toast.success("Фото удалено");
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setLoading(true);

    if (userRole === "user" && !isPlusSubscriber) {
      if (type === "premium") {
        toast.error('Мероприятия типа "Премиум" доступны только для пользователей с подпиской Plus');
        setLoading(false);
        return;
      }
      if (price > 0) {
        toast.error('Платные мероприятия доступны только для пользователей с подпиской Plus');
        setLoading(false);
        return;
      }
    }

    try {
      const response = await axios.post(
        "http://localhost:3000/events",
        {
          title,
          description,
          date,
          maxParticipants,
          type,
          price,
          photos: photoUrls,
          latitude,
          longitude,
        },
        { withCredentials: true }
      );

      toast.success("Мероприятие успешно создано!");
      setTimeout(() => {
        router.push("/events");
      }, 1500);
    } catch (err: any) {
      toast.error(err.response?.data?.message || "Ошибка при создании мероприятия");
      setLoading(false);
    }
  };

  if (loading) {
    return (
      <div className="flex min-h-screen items-center justify-center text-white bg-gradient-to-b from-black to-gray-900">
        <div className="animate-pulse flex flex-col items-center">
          <div className="w-16 h-16 border-4 border-orange-500 border-t-transparent rounded-full animate-spin mb-4"></div>
          <p>Загрузка данных...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="flex min-h-screen bg-gradient-to-b from-black to-gray-900">
      <Sidebar />
      <div className="flex-1 px-4 py-8 text-white md:ml-56">
        <Toaster position="top-center" toastOptions={{
          style: {
            background: '#1f2937',
            color: '#fff',
            border: '1px solid #f97316',
          }
        }} />
        
        <div className="max-w-4xl mx-auto bg-gray-800 p-8 rounded-2xl shadow-lg">
          <h1 className="text-3xl font-bold mb-6 text-orange-500">Создать новое мероприятие</h1>
          
          <form onSubmit={handleSubmit} className="space-y-6">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div>
                <label className="block mb-2 font-medium">Название *</label>
                <input
                  type="text"
                  required
                  value={title}
                  onChange={(e) => setTitle(e.target.value)}
                  className="w-full p-3 border border-gray-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-orange-500 bg-gray-700 text-white"
                  placeholder="Введите название мероприятия"
                />
              </div>
              
              <div>
                <label className="block mb-2 font-medium">Дата и время *</label>
                <input
                  type="datetime-local"
                  required
                  value={date}
                  onChange={(e) => setDate(e.target.value)}
                  className="w-full p-3 border border-gray-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-orange-500 bg-gray-700 text-white"
                />
              </div>
            </div>
            
            <div>
              <label className="block mb-2 font-medium">Описание</label>
              <textarea
                value={description}
                onChange={(e) => setDescription(e.target.value)}
                className="w-full p-3 border border-gray-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-orange-500 bg-gray-700 text-white"
                rows={5}
                placeholder="Расскажите подробнее о вашем мероприятии"
              />
            </div>
            
            <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
              <div>
                <label className="block mb-2 font-medium">Макс. участников</label>
                <input
                  type="number"
                  min={1}
                  max={1000}
                  value={maxParticipants}
                  onChange={(e) => setMaxParticipants(Number(e.target.value))}
                  className="w-full p-3 border border-gray-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-orange-500 bg-gray-700 text-white"
                />
              </div>
              
              <div>
                <label className="block mb-2 font-medium">Тип</label>
                <select
                  value={type}
                  onChange={(e) => setType(e.target.value)}
                  className="w-full p-3 border border-gray-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-orange-500 bg-gray-700 text-white"
                  disabled={userRole === "user" && !isPlusSubscriber}
                >
                  <option value="regular">Обычные</option>
                  <option value="online">Онлайн</option>
                  {userRole !== "user" && <option value="premium">Премиум</option>}
                </select>
              </div>
              
              <div>
                <label className="block mb-2 font-medium">Цена (руб)</label>
                <input
                  type="number"
                  min={0}
                  value={price}
                  onChange={(e) => setPrice(Number(e.target.value))}
                  className="w-full p-3 border border-gray-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-orange-500 bg-gray-700 text-white"
                  disabled={userRole === "user" && !isPlusSubscriber}
                />
              </div>
            </div>
            
            <div>
              <label className="block mb-2 font-medium">Место проведения *</label>
              <div className="border border-gray-600 rounded-lg overflow-hidden h-64">
                <YandexMap 
                  onLocationSelect={(lat, lon) => { 
                    setLatitude(lat); 
                    setLongitude(lon); 
                    toast.success("Место выбрано");
                  }} 
                />
              </div>
              {latitude && longitude && (
                <p className="mt-2 text-gray-400">
                  Выбранные координаты: {latitude.toFixed(6)}, {longitude.toFixed(6)}
                </p>
              )}
              {!latitude && !longitude && (
                <p className="mt-2 text-orange-400">Пожалуйста, выберите место на карте</p>
              )}
            </div>
            
            <div>
              <label className="block mb-2 font-medium">Фото мероприятия ({photoUrls.length}/{maxPhotos})</label>
              <div
                onDragEnter={handleDragEnter}
                onDragLeave={handleDragLeave}
                onDragOver={handleDragOver}
                onDrop={handleDrop}
                className={`w-full p-8 border-2 border-dashed rounded-lg cursor-pointer transition-all ${
                  dragging ? "border-orange-400 bg-orange-900/30" : "border-gray-600 hover:border-orange-500"
                }`}
                onClick={() => fileInputRef.current?.click()}
              >
                <div className="text-center">
                  {uploading ? (
                    <div className="flex flex-col items-center">
                      <div className="w-8 h-8 border-2 border-orange-500 border-t-transparent rounded-full animate-spin mb-2"></div>
                      <p>Загрузка...</p>
                    </div>
                  ) : (
                    <>
                      <svg className="w-12 h-12 mx-auto text-orange-500 mb-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12"></path>
                      </svg>
                      <p className="mb-1">Перетащите фото сюда или кликните для выбора</p>
                      <p className="text-sm text-gray-400">Поддерживаются JPG, PNG (макс. {maxPhotos} фото)</p>
                    </>
                  )}
                </div>
                <input
                  ref={fileInputRef}
                  type="file"
                  accept="image/*"
                  multiple
                  onChange={handleFileChange}
                  className="hidden"
                  disabled={uploading}
                />
              </div>
              
              {photoUrls.length > 0 && (
                <div className="mt-4 grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 gap-3">
                  {photoUrls.map((url, index) => (
                    <div key={index} className="relative group">
                      <img
                        src={url}
                        alt={`Фото ${index + 1}`}
                        className="w-full h-32 object-cover rounded-lg border border-gray-600 group-hover:border-orange-500 transition-colors"
                      />
                      <button
                        type="button"
                        onClick={() => removePhoto(index)}
                        className="absolute top-2 right-2 bg-red-600 text-white rounded-full w-6 h-6 flex items-center justify-center opacity-0 group-hover:opacity-100 transition-opacity"
                        title="Удалить фото"
                      >
                        ×
                      </button>
                    </div>
                  ))}
                </div>
              )}
            </div>
            
            <div className="pt-4 flex justify-end space-x-4">
              <button
                type="button"
                onClick={() => router.push("/events")}
                className="px-6 py-2 border border-gray-600 rounded-lg hover:bg-gray-700 transition-colors"
                disabled={loading || uploading}
              >
                Отмена
              </button>
              <button
                type="submit"
                disabled={loading || uploading || !latitude || !longitude}
                className="px-6 py-2 bg-orange-500 text-white rounded-lg hover:bg-orange-600 disabled:opacity-50 transition-colors flex items-center"
              >
                {loading ? (
                  <>
                    <svg className="animate-spin -ml-1 mr-2 h-4 w-4 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                      <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                      <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                    </svg>
                    Создание...
                  </>
                ) : "Создать мероприятие"}
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>
  );
}

frontend/app/forgot-password/page.tsx
'use client'
import { useEffect, useState } from 'react'
import { useRouter, useSearchParams } from 'next/navigation'
import axios from 'axios'
import { useForm } from 'react-hook-form'
import { yupResolver } from '@hookform/resolvers/yup'
import * as yup from 'yup'

const schema = yup.object({
  email: yup.string().email('Неверный email').required('Обязательное поле'),
})

export default function ForgotPasswordPage() {
  const router = useRouter()
  const searchParams = useSearchParams()
  const [serverError, setServerError] = useState('')
  
  const {
    register,
    handleSubmit,
    setValue,
    formState: { errors }
  } = useForm({
    resolver: yupResolver(schema)
  })

  useEffect(() => {
    const emailFromParams = searchParams.get('email')
    if (emailFromParams) {
      setValue('email', emailFromParams)
    }
  }, [searchParams, setValue])

  const onSubmit = async (data: { email: string }) => {
    setServerError('')
    try {
      await axios.post(
        'http://localhost:3000/auth/request-password-reset',
        data,
        { withCredentials: true }
      )
      router.push(`/verify-reset-code?email=${encodeURIComponent(data.email)}`)
    } catch {
      setServerError('Не удалось отправить код')
    }
  }

  return (
    <div className="min-h-screen bg-black px-4 py-10 text-orange-100 flex items-center justify-center">
      <div className="w-full max-w-md bg-gray-900 p-8 rounded-2xl shadow-xl border border-orange-600 space-y-6">
        <h1 className="text-2xl font-bold text-center text-orange-400">Забыли пароль?</h1>

        <form onSubmit={handleSubmit(onSubmit)} className="space-y-4">
          <input
            type="email"
            placeholder="Email"
            {...register('email')}
            className="w-full px-4 py-2 bg-gray-800 border border-orange-500 text-orange-100 placeholder-orange-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-orange-400"
          />
          {errors.email && <p className="text-sm text-red-400">{errors.email.message}</p>}
          {serverError && <p className="text-sm text-red-400">{serverError}</p>}
          <button
            type="submit"
            className="w-full bg-orange-500 hover:bg-orange-600 text-black py-2 rounded-lg font-semibold transition"
          >
            Отправить код
          </button>
        </form>
      </div>
    </div>
  )
}


frontend/app/login/page.tsx

'use client'

import { useState } from 'react'
import { useRouter } from 'next/navigation'
import axios from 'axios'
import { useForm } from 'react-hook-form'
import { yupResolver } from '@hookform/resolvers/yup'
import * as yup from 'yup'
import Link from 'next/link'

const schema = yup.object({
  email: yup.string().email('Неверный email').required('Обязательное поле'),
  password: yup.string()
    .min(6, 'Минимум 6 символов')
    .required('Введите пароль'),
})

export default function LoginPage() {
  const [loading, setLoading] = useState(false)
  const [error, setError] = useState<string | null>(null)
  const router = useRouter()

  const {
    register,
    handleSubmit,
    watch,
    formState: { errors }
  } = useForm({
    resolver: yupResolver(schema)
  })

  const onSubmit = async (data: { email: string; password: string }) => {
    setLoading(true)
    setError(null)

    try {
      await axios.post('http://localhost:3000/auth/signin', data, {
        withCredentials: true 
      })

      router.push('/dashboard')
    } catch (err: any) {
      setError(
        err.response?.data?.message ||
        'Ошибка входа. Проверьте email и пароль'
      )
    } finally {
      setLoading(false)
    }
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-900 to-black flex items-center justify-center p-4">
      <div className="w-full max-w-md bg-gray-900/80 backdrop-blur-sm border border-gray-700 rounded-2xl shadow-xl overflow-hidden">

        <div className="h-2 bg-gradient-to-r from-orange-500 to-pink-600"></div>
        
        <div className="p-8">
          <div className="text-center mb-8">
            <h1 className="text-3xl font-bold text-transparent bg-clip-text bg-gradient-to-r from-orange-400 to-pink-500 mb-2">
              Добро пожаловать
            </h1>
            <p className="text-gray-400">Введите свои данные для входа</p>
          </div>

          <form onSubmit={handleSubmit(onSubmit)} className="space-y-6">
    
            <div>
              <label className="block text-sm font-medium text-gray-300 mb-2">
                Email
              </label>
              <div className="relative">
                <input
                  type="email"
                  {...register('email')}
                  className={`w-full px-4 py-3 bg-gray-800/50 border ${
                    errors.email 
                      ? 'border-red-500/50 focus:ring-red-500/30 focus:border-red-500' 
                      : 'border-gray-700 focus:ring-orange-500/30 focus:border-orange-500'
                  } rounded-lg text-gray-100 placeholder-gray-500 transition-all duration-200`}
                  placeholder="your@email.com"
                  disabled={loading}
                />
                {errors.email && (
                  <div className="absolute right-3 top-3.5 text-red-400">
                    <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                      <path fillRule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z" clipRule="evenodd" />
                    </svg>
                  </div>
                )}
              </div>
              {errors.email && (
                <div className="mt-2 flex items-center text-red-400 text-sm">
                  <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 mr-1" viewBox="0 0 20 20" fill="currentColor">
                    <path fillRule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z" clipRule="evenodd" />
                  </svg>
                  {errors.email.message}
                </div>
              )}
            </div>

            <div>
              <div className="flex justify-between items-center mb-2">
                <label className="block text-sm font-medium text-gray-300">
                  Пароль
                </label>
                <button
                  type="button"
                  disabled={loading || !watch('email')}
                  onClick={() => {
                    const email = watch('email');
                    if (email) {
                      router.push(`/forgot-password?email=${encodeURIComponent(email)}`);
                    }
                  }}
                  className="text-xs text-orange-400 hover:text-orange-300 transition-colors disabled:text-gray-600 disabled:hover:text-gray-600"
                >
                  Забыли пароль?
                </button>
              </div>
              <div className="relative">
                <input
                  type="password"
                  {...register('password')}
                  className={`w-full px-4 py-3 bg-gray-800/50 border ${
                    errors.password 
                      ? 'border-red-500/50 focus:ring-red-500/30 focus:border-red-500' 
                      : 'border-gray-700 focus:ring-orange-500/30 focus:border-orange-500'
                  } rounded-lg text-gray-100 placeholder-gray-500 transition-all duration-200`}
                  placeholder="••••••••"
                  disabled={loading}
                />
                {errors.password && (
                  <div className="absolute right-3 top-3.5 text-red-400">
                    <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                      <path fillRule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z" clipRule="evenodd" />
                    </svg>
                  </div>
                )}
              </div>
              {errors.password && (
                <div className="mt-2 flex items-center text-red-400 text-sm">
                  <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 mr-1" viewBox="0 0 20 20" fill="currentColor">
                    <path fillRule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z" clipRule="evenodd" />
                  </svg>
                  {errors.password.message}
                </div>
              )}
            </div>

      
            {error && (
              <div className="p-4 bg-red-900/50 border border-red-700/50 rounded-lg flex items-start">
                <div className="flex-shrink-0 text-red-400 mt-0.5 mr-3">
                  <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                    <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clipRule="evenodd" />
                  </svg>
                </div>
                <div className="text-sm text-red-200">{error}</div>
              </div>
            )}

            <button
              type="submit"
              disabled={loading}
              className={`w-full py-3 px-4 rounded-lg font-medium transition-all duration-200 ${
                loading 
                  ? 'bg-gray-700 text-gray-400 cursor-not-allowed' 
                  : 'bg-gradient-to-r from-orange-500 to-pink-600 hover:from-orange-600 hover:to-pink-700 text-white shadow-lg hover:shadow-orange-500/20'
              } flex items-center justify-center`}
            >
              {loading ? (
                <>
                  <svg className="animate-spin -ml-1 mr-2 h-4 w-4 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                    <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                    <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                  </svg>
                  Вход в систему...
                </>
              ) : (
                <>
                  <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor">
                    <path fillRule="evenodd" d="M5 9V7a5 5 0 0110 0v2a2 2 0 012 2v5a2 2 0 01-2 2H5a2 2 0 01-2-2v-5a2 2 0 012-2zm8-2v2H7V7a3 3 0 016 0z" clipRule="evenodd" />
                  </svg>
                  Войти
                </>
              )}
            </button>
          </form>

          <div className="mt-6 text-center text-sm text-gray-400">
            Нет аккаунта?{' '}
            <Link 
              href="/register" 
              className="font-medium text-orange-400 hover:text-orange-300 transition-colors"
            >
              Зарегистрироваться
            </Link>
          </div>
        </div>
      </div>
    </div>
  )
}
frontend/app/moderator/page.tsx
'use client';

import React, { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';

type User = {
  id: number;
  email: string;
  username: string;
  role: string;
  city?: string;
  age?: number;
};

type Event = {
  id: number;
  title: string;
  description?: string;
  date: string;
  type: string;
  price: number;
  creator: {
    id: number;
    username: string;
  };
};

type Tab = 'users' | 'events';

const ModeratorPage: React.FC = () => {
  const router = useRouter();
  const [isLoading, setIsLoading] = useState(true);
  const [isModerator, setIsModerator] = useState(false);
  const [activeTab, setActiveTab] = useState<Tab>('users');
  const [users, setUsers] = useState<User[]>([]);
  const [events, setEvents] = useState<Event[]>([]);
  const [userSearch, setUserSearch] = useState('');
  const [eventSearch, setEventSearch] = useState('');
  const [userSortBy, setUserSortBy] = useState<string>('id');
  const [userSortOrder, setUserSortOrder] = useState<'asc' | 'desc'>('asc');
  const [eventSortBy, setEventSortBy] = useState<string>('date');
  const [eventSortOrder, setEventSortOrder] = useState<'asc' | 'desc'>('desc');

  useEffect(() => {
    const checkAuthAndRole = async () => {
      try {
        const res = await fetch('http://localhost:3000/users/me');
        if (!res.ok) {
          throw new Error('Не авторизован');
        }
        const user = await res.json();
        if (user.role !== 'moderator') {
          throw new Error('Недостаточно прав');
        }
        setIsModerator(true);
      } catch (error:any) {
        console.error(error);
      
        if (error.message === 'Не авторизован') {
          router.push('/login');
        } else {
          router.push('/dashboard'); 
        }
      } finally {
        setIsLoading(false);
      }
    };

    checkAuthAndRole();
  }, [router]);

  useEffect(() => {
    if (isModerator) {
      if (activeTab === 'users') {
        fetchUsers();
      } else {
        fetchEvents();
      }
    }
  }, [isModerator, activeTab, userSearch, userSortBy, userSortOrder, eventSearch, eventSortBy, eventSortOrder]);

  const fetchUsers = async () => {
    const params = new URLSearchParams();
    if (userSearch) params.append('search', userSearch);
    if (userSortBy) params.append('sortBy', userSortBy);
    if (userSortOrder) params.append('sortOrder', userSortOrder);

    const res = await fetch(`/moderator/users?${params.toString()}`);
    const data = await res.json();
    setUsers(data.data);
  };

  const fetchEvents = async () => {
    const params = new URLSearchParams();
    if (eventSearch) params.append('search', eventSearch);
    if (eventSortBy) params.append('sortBy', eventSortBy);
    if (eventSortOrder) params.append('sortOrder', eventSortOrder);

    const res = await fetch(`/moderator/events?${params.toString()}`);
    const data = await res.json();
    setEvents(data.data);
  };

  const handleUserSort = (column: string) => {
    if (userSortBy === column) {
      setUserSortOrder(userSortOrder === 'asc' ? 'desc' : 'asc');
    } else {
      setUserSortBy(column);
      setUserSortOrder('asc');
    }
  };

  const handleEventSort = (column: string) => {
    if (eventSortBy === column) {
      setEventSortOrder(eventSortOrder === 'asc' ? 'desc' : 'asc');
    } else {
      setEventSortBy(column);
      setEventSortOrder('asc');
    }
  };

  if (isLoading) {
    return <div className="p-4">Загрузка...</div>;
  }

  if (!isModerator) {
    return <div className="p-4">Проверка прав доступа...</div>;
  }

  return (
    <div className="p-4">
      <h1 className="text-2xl font-bold mb-4">Панель модератора</h1>
      <div className="mb-4">
        <button
          className={`mr-4 px-4 py-2 ${activeTab === 'users' ? 'bg-blue-500 text-white' : 'bg-gray-200'}`}
          onClick={() => setActiveTab('users')}
        >
          Пользователи
        </button>
        <button
          className={`px-4 py-2 ${activeTab === 'events' ? 'bg-blue-500 text-white' : 'bg-gray-200'}`}
          onClick={() => setActiveTab('events')}
        >
          События
        </button>
      </div> 
 
      {activeTab === 'users' && (
        <div>
          <input
            type="text"
            placeholder="Поиск пользователей..."
            value={userSearch}
            onChange={(e) => setUserSearch(e.target.value)}
            className="mb-2 p-2 border border-gray-300 rounded"
          />
          <table className="w-full border-collapse border border-gray-300">
            <thead>
              <tr>
                <th className="border border-gray-300 cursor-pointer" onClick={() => handleUserSort('id')}>ID</th>
                <th className="border border-gray-300 cursor-pointer" onClick={() => handleUserSort('username')}>Имя пользователя</th>
                <th className="border border-gray-300 cursor-pointer" onClick={() => handleUserSort('email')}>Email</th>
                <th className="border border-gray-300 cursor-pointer" onClick={() => handleUserSort('role')}>Роль</th>
                <th className="border border-gray-300 cursor-pointer" onClick={() => handleUserSort('city')}>Город</th>
                <th className="border border-gray-300 cursor-pointer" onClick={() => handleUserSort('age')}>Возраст</th>
              </tr>
            </thead>
            <tbody>
              {users.map((user) => (
                <tr key={user.id}>
                  <td className="border border-gray-300 p-1">{user.id}</td>
                  <td className="border border-gray-300 p-1">{user.username}</td>
                  <td className="border border-gray-300 p-1">{user.email}</td>
                  <td className="border border-gray-300 p-1">{user.role}</td>
                  <td className="border border-gray-300 p-1">{user.city || '-'}</td>
                  <td className="border border-gray-300 p-1">{user.age || '-'}</td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      )}

      {activeTab === 'events' && (
        <div>
          <input
            type="text"
            placeholder="Поиск событий..."
            value={eventSearch}
            onChange={(e) => setEventSearch(e.target.value)}
            className="mb-2 p-2 border border-gray-300 rounded"
          />
          <table className="w-full border-collapse border border-gray-300">
            <thead>
              <tr>
                <th className="border border-gray-300 cursor-pointer" onClick={() => handleEventSort('id')}>ID</th>
                <th className="border border-gray-300 cursor-pointer" onClick={() => handleEventSort('title')}>Название</th>
                <th className="border border-gray-300 cursor-pointer" onClick={() => handleEventSort('date')}>Дата</th>
                <th className="border border-gray-300 cursor-pointer" onClick={() => handleEventSort('type')}>Тип</th>
                <th className="border border-gray-300 cursor-pointer" onClick={() => handleEventSort('price')}>Цена</th>
                <th className="border border-gray-300 cursor-pointer">Создатель</th>
              </tr>
            </thead>
            <tbody>
              {events.map((event) => (
                <tr key={event.id}>
                  <td className="border border-gray-300 p-1">{event.id}</td>
                  <td className="border border-gray-300 p-1">{event.title}</td>
                  <td className="border border-gray-300 p-1">{new Date(event.date).toLocaleString()}</td>
                  <td className="border border-gray-300 p-1">{event.type}</td>
                  <td className="border border-gray-300 p-1">{event.price}</td>
                  <td className="border border-gray-300 p-1">{event.creator.username}</td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      )}
    </div>
  );
};

export default ModeratorPage;

frontend/app/new-password/page.tsx

'use client'
import { useSearchParams, useRouter } from 'next/navigation'
import { useForm } from 'react-hook-form'
import { yupResolver } from '@hookform/resolvers/yup'
import * as yup from 'yup'
import { motion } from 'framer-motion'
import { useState } from 'react'
import axios from 'axios'

const schema = yup.object({
  password: yup.string().min(6, 'Минимум 6 символов').required('Введите новый пароль'),
  confirmPassword: yup
    .string()
    .oneOf([yup.ref('password')], 'Пароли не совпадают')
    .required('Повторите пароль'),
})

const fadeIn = {
  hidden: { opacity: 0, y: 20 },
  visible: { opacity: 1, y: 0 }
}

export default function NewPasswordPage() {
  const searchParams = useSearchParams()
  const router = useRouter()
  const email = searchParams.get('email') || ''
  const [serverError, setServerError] = useState('')
  const [loading, setLoading] = useState(false)

  const {
    register,
    handleSubmit,
    formState: { errors }
  } = useForm({
    resolver: yupResolver(schema)
  })

  const onSubmit = async (data: { password: string }) => {
    setLoading(true)
    setServerError('')
    try {
      await axios.post('http://localhost:3000/auth/reset-password', {
        email,
        password: data.password
      }, { withCredentials: true })
      router.push('/login')
    } catch (error) {
      setServerError('Не удалось установить новый пароль')
    } finally {
      setLoading(false)
    }
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-900 to-black flex items-center justify-center p-4">
      <motion.div
        initial="hidden"
        animate="visible"
        variants={fadeIn}
        className="w-full max-w-md bg-gray-900/80 backdrop-blur-sm border border-gray-700 rounded-2xl shadow-xl overflow-hidden"
      >
        <div className="h-2 bg-gradient-to-r from-orange-500 to-pink-600" />

        <div className="p-8">
          <motion.div
            variants={fadeIn}
            transition={{ delay: 0.2 }}
            className="text-center mb-8"
          >
            <div className="flex justify-center mb-4">
              <div className="w-16 h-16 bg-orange-500/10 rounded-full flex items-center justify-center border border-orange-500/30">
                <svg className="w-8 h-8 text-orange-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M12 11c0-1.657-1.343-3-3-3S6 9.343 6 11v1H4v6h16v-6h-2v-1c0-1.657-1.343-3-3-3s-3 1.343-3 3z" />
                </svg>
              </div>
            </div>
            <h1 className="text-3xl font-extrabold text-transparent bg-clip-text bg-gradient-to-r from-orange-400 via-pink-400 to-pink-500 mb-2 drop-shadow-[0_1px_1px_rgba(255,255,255,0.1)]">
              Новый пароль
            </h1>
            <p className="text-gray-400">Введите новый пароль для {email}</p>
          </motion.div>

          <motion.form
            onSubmit={handleSubmit(onSubmit)}
            variants={fadeIn}
            transition={{ delay: 0.4 }}
            className="space-y-6"
          >
            <div>
              <input
                type="password"
                {...register('password')}
                placeholder="Новый пароль"
                className={`w-full px-6 py-4 bg-gray-800/50 border ${
                  errors.password
                    ? 'border-red-500/50 focus:ring-red-500/30 focus:border-red-500'
                    : 'border-gray-700 focus:ring-orange-500/30 focus:border-orange-500'
                } rounded-xl text-gray-100 placeholder-gray-600 text-base focus:outline-none transition-all`}
              />
              {errors.password && (
                <p className="mt-1 text-sm text-red-400">{errors.password.message}</p>
              )}
            </div>

            <div>
              <input
                type="password"
                {...register('confirmPassword')}
                placeholder="Повторите пароль"
                className={`w-full px-6 py-4 bg-gray-800/50 border ${
                  errors.confirmPassword
                    ? 'border-red-500/50 focus:ring-red-500/30 focus:border-red-500'
                    : 'border-gray-700 focus:ring-orange-500/30 focus:border-orange-500'
                } rounded-xl text-gray-100 placeholder-gray-600 text-base focus:outline-none transition-all`}
              />
              {errors.confirmPassword && (
                <p className="mt-1 text-sm text-red-400">{errors.confirmPassword.message}</p>
              )}
            </div>

            {serverError && (
              <motion.div
                initial={{ opacity: 0 }}
                animate={{ opacity: 1 }}
                className="p-3 bg-red-900/50 border border-red-700/50 rounded-lg flex items-start"
              >
                <svg className="flex-shrink-0 w-5 h-5 mt-0.5 mr-2 text-red-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
                </svg>
                <span className="text-red-200 text-sm">{serverError}</span>
              </motion.div>
            )}

            <button
              type="submit"
              disabled={loading}
              className={`w-full py-3 px-4 rounded-xl font-semibold text-sm tracking-wide uppercase transition-all ${
                loading
                  ? 'bg-gray-700 text-gray-400 cursor-not-allowed'
                  : 'bg-gradient-to-r from-orange-400 to-pink-500 hover:from-orange-500 hover:to-pink-600 text-white shadow-md shadow-orange-400/30 hover:shadow-pink-500/40'
              } flex items-center justify-center`}
            >
              {loading ? (
                <>
                  <svg className="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                    <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                    <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                  </svg>
                  Сохраняем...
                </>
              ) : (
                <>
                  <svg className="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M5 13l4 4L19 7" />
                  </svg>
                  Сохранить
                </>
              )}
            </button>
          </motion.form>
        </div>
      </motion.div>
    </div>
  )
}

frontend/app/register/page.tsx

'use client'

import { useForm } from 'react-hook-form'
import { yupResolver } from '@hookform/resolvers/yup'
import * as yup from 'yup'
import axios from 'axios'
import { useRouter } from 'next/navigation'
import { useState } from 'react'
import Link from 'next/link'
import { motion } from 'framer-motion'

const schema = yup.object({
  email: yup
    .string()
    .email('Неверный формат email')
    .required('Email обязателен'),
  password: yup
    .string()
    .min(6, 'Пароль должен содержать минимум 6 символов')
    .required('Пароль обязателен'),
  confirmPassword: yup
    .string()
    .oneOf([yup.ref('password')], 'Пароли должны совпадать')
    .required('Подтверждение пароля обязательно'),
})

const fadeIn = {
  hidden: { opacity: 0, y: 20 },
  visible: { opacity: 1, y: 0 }
}

export default function RegisterPage() {
  const router = useRouter()
  const [loading, setLoading] = useState(false)
  const [serverError, setServerError] = useState<string | null>(null)
  const [success, setSuccess] = useState(false)

  const {
    register,
    handleSubmit,
    formState: { errors },
  } = useForm({
    resolver: yupResolver(schema),
    mode: 'onBlur',
  })

  const onSubmit = async (data: { email: string; password: string; confirmPassword: string }) => {
    setLoading(true)
    setServerError(null)

    try {
      const response = await axios.post(
        'http://localhost:3000/auth/signup',
        { email: data.email, password: data.password },
        { withCredentials: true }
      )

      if (response.status === 200) {
        setSuccess(true)
      }
    } catch (error: any) {
      setServerError(
        error.response?.data?.message ||
          'Произошла ошибка при регистрации. Попробуйте позже.'
      )
    } finally {
      setLoading(false)
    }
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-900 to-black flex items-center justify-center p-4">
      <motion.div 
        initial="hidden"
        animate="visible"
        variants={fadeIn}
        transition={{ duration: 0.5 }}
        className="w-full max-w-md bg-gray-900/80 backdrop-blur-sm border border-gray-700 rounded-2xl shadow-xl overflow-hidden"
      >
        <div className="h-2 bg-gradient-to-r from-orange-500 to-pink-600"></div>
        
        <div className="p-8">
          <motion.div 
            variants={fadeIn}
            transition={{ delay: 0.2 }}
            className="text-center mb-8"
          >
            <h1 className="text-3xl font-bold text-transparent bg-clip-text bg-gradient-to-r from-orange-400 to-pink-500 mb-2">
              Создайте аккаунт
            </h1>
            <p className="text-gray-400">Начните использовать все возможности платформы</p>
          </motion.div>

          {success ? (
            <motion.div
              initial="hidden"
              animate="visible"
              variants={fadeIn}
              className="bg-green-900/50 text-green-300 p-6 rounded-xl text-center space-y-4 border border-green-700/50"
            >
              <div className="flex justify-center">
                <div className="w-12 h-12 bg-green-800/50 rounded-full flex items-center justify-center border border-green-600/50">
                  <svg className="w-6 h-6 text-green-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                  </svg>
                </div>
              </div>
              <p className="text-lg">Код подтверждения отправлен на вашу почту</p>
              <button
                onClick={() => router.push('/verify')}
                className="bg-gradient-to-r from-orange-500 to-pink-500 hover:from-orange-600 hover:to-pink-600 text-black font-bold py-2 px-6 rounded-lg transition transform hover:scale-105"
              >
                Продолжить
              </button>
            </motion.div>
          ) : (
            <motion.form 
              onSubmit={handleSubmit(onSubmit)} 
              className="space-y-6"
              variants={fadeIn}
              transition={{ delay: 0.4 }}
            >
              <div>
                <label className="block text-sm font-medium text-gray-300 mb-2">
                  Email
                </label>
                <div className="relative">
                  <input
                    type="email"
                    {...register('email')}
                    className={`w-full px-4 py-3 bg-gray-800/50 border ${
                      errors.email 
                        ? 'border-red-500/50 focus:ring-red-500/30 focus:border-red-500' 
                        : 'border-gray-700 focus:ring-orange-500/30 focus:border-orange-500'
                    } rounded-lg text-gray-100 placeholder-gray-500 transition-all duration-200`}
                    placeholder="your@email.com"
                    disabled={loading}
                  />
                  {errors.email && (
                    <div className="absolute right-3 top-3.5 text-red-400">
                      <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                        <path fillRule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z" clipRule="evenodd" />
                      </svg>
                    </div>
                  )}
                </div>
                {errors.email && (
                  <div className="mt-2 flex items-center text-red-400 text-sm">
                    <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 mr-1" viewBox="0 0 20 20" fill="currentColor">
                      <path fillRule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z" clipRule="evenodd" />
                    </svg>
                    {errors.email.message}
                  </div>
                )}
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-300 mb-2">
                  Пароль
                </label>
                <div className="relative">
                  <input
                    type="password"
                    {...register('password')}
                    className={`w-full px-4 py-3 bg-gray-800/50 border ${
                      errors.password 
                        ? 'border-red-500/50 focus:ring-red-500/30 focus:border-red-500' 
                        : 'border-gray-700 focus:ring-orange-500/30 focus:border-orange-500'
                    } rounded-lg text-gray-100 placeholder-gray-500 transition-all duration-200`}
                    placeholder="••••••••"
                    disabled={loading}
                  />
                  {errors.password && (
                    <div className="absolute right-3 top-3.5 text-red-400">
                      <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                        <path fillRule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z" clipRule="evenodd" />
                      </svg>
                    </div>
                  )}
                </div>
                {errors.password && (
                  <div className="mt-2 flex items-center text-red-400 text-sm">
                    <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 mr-1" viewBox="0 0 20 20" fill="currentColor">
                      <path fillRule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z" clipRule="evenodd" />
                    </svg>
                    {errors.password.message}
                  </div>
                )}
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-300 mb-2">
                  Подтверждение пароля
                </label>
                <div className="relative">
                  <input
                    type="password"
                    {...register('confirmPassword')}
                    className={`w-full px-4 py-3 bg-gray-800/50 border ${
                      errors.confirmPassword 
                        ? 'border-red-500/50 focus:ring-red-500/30 focus:border-red-500' 
                        : 'border-gray-700 focus:ring-orange-500/30 focus:border-orange-500'
                    } rounded-lg text-gray-100 placeholder-gray-500 transition-all duration-200`}
                    placeholder="••••••••"
                    disabled={loading}
                  />
                  {errors.confirmPassword && (
                    <div className="absolute right-3 top-3.5 text-red-400">
                      <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                        <path fillRule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z" clipRule="evenodd" />
                      </svg>
                    </div>
                  )}
                </div>
                {errors.confirmPassword && (
                  <div className="mt-2 flex items-center text-red-400 text-sm">
                    <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 mr-1" viewBox="0 0 20 20" fill="currentColor">
                      <path fillRule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z" clipRule="evenodd" />
                    </svg>
                    {errors.confirmPassword.message}
                  </div>
                )}
              </div>

              {/* Сообщение об ошибке сервера */}
              {serverError && (
                <motion.div 
                  initial={{ opacity: 0, y: -10 }}
                  animate={{ opacity: 1, y: 0 }}
                  className="p-4 bg-red-900/50 border border-red-700/50 rounded-lg flex items-start"
                >
                  <div className="flex-shrink-0 text-red-400 mt-0.5 mr-3">
                    <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                      <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clipRule="evenodd" />
                    </svg>
                  </div>
                  <div className="text-sm text-red-200">{serverError}</div>
                </motion.div>
              )}

              {/* Кнопка регистрации */}
              <button
                type="submit"
                disabled={loading}
                className={`w-full py-3 px-4 rounded-lg font-medium transition-all duration-200 ${
                  loading 
                    ? 'bg-gray-700 text-gray-400 cursor-not-allowed' 
                    : 'bg-gradient-to-r from-orange-500 to-pink-600 hover:from-orange-600 hover:to-pink-700 text-white shadow-lg hover:shadow-orange-500/20'
                } flex items-center justify-center`}
              >
                {loading ? (
                  <>
                    <svg className="animate-spin -ml-1 mr-2 h-4 w-4 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                      <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                      <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                    </svg>
                    Регистрация...
                  </>
                ) : (
                  <>
                    <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor">
                      <path fillRule="evenodd" d="M10 9a3 3 0 100-6 3 3 0 000 6zm-7 9a7 7 0 1114 0H3z" clipRule="evenodd" />
                    </svg>
                    Зарегистрироваться
                  </>
                )}
              </button>
            </motion.form>
          )}

          {!success && (
            <motion.div 
              variants={fadeIn}
              transition={{ delay: 0.6 }}
              className="mt-6 text-center text-sm text-gray-400"
            >
              Уже есть аккаунт?{' '}
              <Link 
                href="/login" 
                className="font-medium text-orange-400 hover:text-orange-300 transition-colors"
              >
                Войти
              </Link>
            </motion.div>
          )}
        </div>
      </motion.div>
    </div>
  )
}
frontend/app/verify/page.tsx
'use client'

import { useState, useEffect } from 'react'
import axios from 'axios'
import { useRouter } from 'next/navigation'
import { motion } from 'framer-motion'

const fadeIn = {
  hidden: { opacity: 0, y: 20 },
  visible: { opacity: 1, y: 0 }
}

export default function VerifyPage() {
  const [code, setCode] = useState('')
  const [clientError, setClientError] = useState<string | null>(null)
  const [backendError, setBackendError] = useState<string | null>(null)
  const [loading, setLoading] = useState(false)
  const [timer, setTimer] = useState(60)
  const [resendSuccess, setResendSuccess] = useState(false)

  const router = useRouter()

  useEffect(() => {
    const interval = setInterval(() => {
      setTimer((prev) => (prev > 0 ? prev - 1 : 0))
    }, 1000)

    return () => clearInterval(interval)
  }, [])

  const handleVerify = async () => {
    setLoading(true)
    setClientError(null)
    setBackendError(null)

    if (!code.trim()) {
      setClientError('Введите код подтверждения')
      setLoading(false)
      return
    }

    try {
      await axios.post(
        'http://localhost:3000/auth/verify',
        { code },
        { withCredentials: true }
      )
      router.push('/dashboard')
    } catch (err: any) {
      setBackendError(
        err.response?.data?.message || 'Ошибка при подтверждении. Попробуйте снова.'
      )
    } finally {
      setLoading(false)
    }
  }

  const handleResend = async () => {
    try {
      await axios.post(
        'http://localhost:3000/auth/resend-code',
        {},
        { withCredentials: true }
      )
      setTimer(60)
      setResendSuccess(true)
      setTimeout(() => setResendSuccess(false), 3000)
    } catch (err) {
      console.log(err)
      setBackendError('Не удалось повторно отправить код. Попробуйте позже.')
    }
  }

  const formatTime = (seconds: number) => {
    const m = Math.floor(seconds / 60)
    const s = seconds % 60
    return `${m}:${s.toString().padStart(2, '0')}`
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-900 to-black flex items-center justify-center p-4">
      <motion.div 
        initial="hidden"
        animate="visible"
        variants={fadeIn}
        transition={{ duration: 0.5 }}
        className="w-full max-w-md bg-gray-900/80 backdrop-blur-sm border border-gray-700 rounded-2xl shadow-xl overflow-hidden"
      >

        <div className="h-2 bg-gradient-to-r from-orange-500 to-pink-600"></div>
        
        <div className="p-8">
          <motion.div 
            variants={fadeIn}
            transition={{ delay: 0.2 }}
            className="text-center mb-8"
          >
            <h1 className="text-3xl font-bold text-transparent bg-clip-text bg-gradient-to-r from-orange-400 to-pink-500 mb-2">
              Подтверждение email
            </h1>
            <p className="text-gray-400">Введите код подтверждения, отправленный на вашу почту</p>
          </motion.div>

          <motion.div
            variants={fadeIn}
            transition={{ delay: 0.4 }}
            className="mb-6"
          >
            <div className="relative">
              <input
                type="text"
                value={code}
                onChange={(e) => setCode(e.target.value)}
                placeholder="Введите 6-значный код"
                className={`w-full px-4 py-3 bg-gray-800/50 border ${
                  clientError || backendError
                    ? 'border-red-500/50 focus:ring-red-500/30 focus:border-red-500' 
                    : 'border-gray-700 focus:ring-orange-500/30 focus:border-orange-500'
                } rounded-lg text-gray-100 placeholder-gray-500 transition-all duration-200 text-center tracking-widest font-mono text-xl`}
                maxLength={6}
              />
              {(clientError || backendError) && (
                <div className="absolute right-3 top-3.5 text-red-400">
                  <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                    <path fillRule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z" clipRule="evenodd" />
                  </svg>
                </div>
              )}
            </div>
            
            {clientError && (
              <motion.div 
                initial={{ opacity: 0, y: -10 }}
                animate={{ opacity: 1, y: 0 }}
                className="mt-2 flex items-center text-red-400 text-sm"
              >
                <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 mr-1" viewBox="0 0 20 20" fill="currentColor">
                  <path fillRule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z" clipRule="evenodd" />
                </svg>
                {clientError}
              </motion.div>
            )}
            {backendError && (
              <motion.div 
                initial={{ opacity: 0, y: -10 }}
                animate={{ opacity: 1, y: 0 }}
                className="mt-2 p-3 bg-red-900/50 border border-red-700/50 rounded-lg flex items-start"
              >
                <div className="flex-shrink-0 text-red-400 mt-0.5 mr-3">
                  <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                    <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clipRule="evenodd" />
                  </svg>
                </div>
                <div className="text-sm text-red-200">{backendError}</div>
              </motion.div>
            )}
          </motion.div>

          <motion.div
            variants={fadeIn}
            transition={{ delay: 0.6 }}
          >
            <button
              onClick={handleVerify}
              disabled={loading}
              className={`w-full py-3 px-4 rounded-lg font-medium transition-all duration-200 ${
                loading 
                  ? 'bg-gray-700 text-gray-400 cursor-not-allowed' 
                  : 'bg-gradient-to-r from-orange-500 to-pink-600 hover:from-orange-600 hover:to-pink-700 text-white shadow-lg hover:shadow-orange-500/20'
              } flex items-center justify-center`}
            >
              {loading ? (
                <>
                  <svg className="animate-spin -ml-1 mr-2 h-4 w-4 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                    <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                    <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                  </svg>
                  Проверка...
                </>
              ) : (
                <>
                  <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor">
                    <path fillRule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clipRule="evenodd" />
                  </svg>
                  Подтвердить
                </>
              )}
            </button>
          </motion.div>
          <motion.div
            variants={fadeIn}
            transition={{ delay: 0.8 }}
            className="mt-6 text-center"
          >
            {resendSuccess ? (
              <div className="p-2 bg-green-900/30 text-green-400 rounded-lg text-sm border border-green-700/50">
                Код успешно отправлен!
              </div>
            ) : timer > 0 ? (
              <p className="text-sm text-gray-400">
                Повторная отправка возможна через{' '}
                <span className="font-mono text-orange-400">{formatTime(timer)}</span>
              </p>
            ) : (
              <button
                onClick={handleResend}
                className="text-sm text-orange-400 hover:text-orange-300 underline font-medium transition-colors"
              >
                Отправить код повторно
              </button>
            )}
          </motion.div>
        </div>
      </motion.div>
    </div>
  )
}

frontend/app/verify-reset-code/page.tsx

'use client'
import { useSearchParams, useRouter } from 'next/navigation'
import { useState } from 'react'
import axios from 'axios'
import { useForm } from 'react-hook-form'
import { yupResolver } from '@hookform/resolvers/yup'
import * as yup from 'yup'
import { motion } from 'framer-motion'

const schema = yup.object({
  code: yup.string().length(6, 'Код должен содержать 6 цифр').required('Введите код'),
})

const fadeIn = {
  hidden: { opacity: 0, y: 20 },
  visible: { opacity: 1, y: 0 }
}

export default function VerifyCodePage() {
  const searchParams = useSearchParams()
  const router = useRouter()
  const email = searchParams.get('email') || ''
  const [serverError, setServerError] = useState('')
  const [loading, setLoading] = useState(false)

  const {
    register,
    handleSubmit,
    formState: { errors }
  } = useForm({
    resolver: yupResolver(schema)
  })

  const onSubmit = async (data: { code: string }) => {
    setLoading(true)
    setServerError('')
    try {
      await axios.post(
        'http://localhost:3000/auth/verify-reset-code',
        { code: data.code },
        { withCredentials: true }
      )
      router.push(`/new-password?email=${email}`)
    } catch {
      setServerError('Неверный код подтверждения')
    } finally {
      setLoading(false)
    }
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-900 to-black flex items-center justify-center p-4">
      <motion.div 
        initial="hidden"
        animate="visible"
        variants={fadeIn}
        className="w-full max-w-md bg-gray-900/80 backdrop-blur-sm border border-gray-700 rounded-2xl shadow-xl overflow-hidden"
      >
        {/* Gradient header */}
        <div className="h-2 bg-gradient-to-r from-orange-500 to-pink-600"></div>
        
        <div className="p-8">
          <motion.div 
            variants={fadeIn}
            transition={{ delay: 0.2 }}
            className="text-center mb-8"
          >
            <div className="flex justify-center mb-4">
              <div className="w-16 h-16 bg-orange-500/10 rounded-full flex items-center justify-center border border-orange-500/30">
                <svg className="w-8 h-8 text-orange-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M3 8l7.89 5.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z" />
                </svg>
              </div>
            </div>
            <h1 className="text-3xl font-bold text-transparent bg-clip-text bg-gradient-to-r from-orange-300 to-pink-400 mb-2">
              Подтвердите код
            </h1>
            <p className="text-gray-400">Мы отправили 6-значный код на {email}</p>
          </motion.div>

          {/* Code input */}
          <motion.form
            onSubmit={handleSubmit(onSubmit)}
            variants={fadeIn}
            transition={{ delay: 0.4 }}
            className="space-y-6"
          >
            <div className="relative">
              <input
                type="text"
                {...register('code')}
                placeholder="______"
                maxLength={6}
                className={`w-full px-6 py-4 bg-gray-800/50 border ${
                  errors.code || serverError
                    ? 'border-red-500/50 focus:ring-red-500/30 focus:border-red-500'
                    : 'border-gray-700 focus:ring-orange-500/30 focus:border-orange-500'
                } rounded-xl text-gray-100 placeholder-gray-600 text-center text-2xl font-mono tracking-widest focus:outline-none transition-all`}
              />
              {(errors.code || serverError) && (
                <div className="absolute right-3 top-1/2 transform -translate-y-1/2 text-red-400">
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                  </svg>
                </div>
              )}
            </div>

            {/* Error messages */}
            {errors.code && (
              <motion.div
                initial={{ opacity: 0 }}
                animate={{ opacity: 1 }}
                className="flex items-center text-red-400 text-sm"
              >
                <svg className="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                </svg>
                {errors.code.message}
              </motion.div>
            )}
            {serverError && (
              <motion.div
                initial={{ opacity: 0 }}
                animate={{ opacity: 1 }}
                className="p-3 bg-red-900/50 border border-red-700/50 rounded-lg flex items-start"
              >
                <svg className="flex-shrink-0 w-5 h-5 mt-0.5 mr-2 text-red-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
                </svg>
                <span className="text-red-200 text-sm">{serverError}</span>
              </motion.div>
            )}

            {/* Submit button */}
            <button
              type="submit"
              disabled={loading}
              className={`w-full py-3 px-4 rounded-xl font-medium transition-all ${
                loading
                  ? 'bg-gray-700 text-gray-400 cursor-not-allowed'
                  : 'bg-gradient-to-r from-orange-500 to-pink-600 hover:from-orange-600 hover:to-pink-700 text-white shadow-lg hover:shadow-orange-500/30'
              } flex items-center justify-center`}
            >
              {loading ? (
                <>
                  <svg className="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                    <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                    <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                  </svg>
                  Проверка...
                </>
              ) : (
                <>
                  <svg className="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M5 13l4 4L19 7" />
                  </svg>
                  Подтвердить
                </>
              )}
            </button>
          </motion.form>
        </div>
      </motion.div>
    </div>
  )
}


sidebar component
import Link from "next/link";
import { useState } from "react";

const navLinks = [
  { href: "/", label: "Главная", icon: "M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6" },
  { href: "/events", label: "События", icon: "M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" },
  { href: "/dashboard", label: "Личный кабинет", icon: "M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" },
  { href: "/register", label: "Регистрация", icon: "M18 9v3m0 0v3m0-3h3m-3 0h-3m-2-5a4 4 0 11-8 0 4 4 0 018 0zM3 20a6 6 0 0112 0v1H3v-1z" },
  { href: "/login", label: "Вход", icon: "M11 16l-4-4m0 0l4-4m-4 4h14m-5 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h7a3 3 0 013 3v1" },
];

const Sidebar = () => {
  const [isSidebarOpen, setIsSidebarOpen] = useState(false);
  const toggleSidebar = () => setIsSidebarOpen(!isSidebarOpen);

  return (
    <>
      <button
        className="fixed top-4 left-4 z-50 md:hidden p-2 rounded-md bg-gray-800 text-white shadow-lg hover:bg-gray-700 transition-colors"
        onClick={toggleSidebar}
        aria-label="Toggle menu"
      >
        <svg
          className="w-6 h-6"
          fill="none"
          stroke="currentColor"
          viewBox="0 0 24 24"
          xmlns="http://www.w3.org/2000/svg"
        >
          {isSidebarOpen ? (
            <path
              strokeLinecap="round"
              strokeLinejoin="round"
              strokeWidth={2}
              d="M6 18L18 6M6 6l12 12"
            />
          ) : (
            <path
              strokeLinecap="round"
              strokeLinejoin="round"
              strokeWidth={2}
              d="M4 6h16M4 12h16M4 18h16"
            />
          )}
        </svg>
      </button>

      <div
        className={`fixed inset-0 bg-black bg-opacity-50 z-40 transition-opacity duration-300 md:hidden ${
          isSidebarOpen ? "opacity-100 visible" : "opacity-0 invisible"
        }`}
        onClick={toggleSidebar}
      />

      <nav
        className={`fixed top-0 left-0 h-full w-72 bg-gray-800 text-white shadow-xl z-50 transform transition-transform duration-300 ease-in-out
        ${isSidebarOpen ? "translate-x-0" : "-translate-x-full"} md:translate-x-0 md:static md:flex md:flex-col md:w-64`}
      >
        <div className="flex items-center justify-between p-4 border-b border-gray-700">
          <div className="flex items-center space-x-2">
            <div className="w-8 h-8 bg-orange-500 rounded-full flex items-center justify-center">
              <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  strokeWidth={2}
                  d="M13 10V3L4 14h7v7l9-11h-7z"
                />
              </svg>
            </div>
            <h2 className="text-xl font-bold">EventHub</h2>
          </div>
          <button
            onClick={toggleSidebar}
            aria-label="Close menu"
            className="p-1 rounded-md hover:bg-gray-700 md:hidden"
          >
            <svg
              className="w-6 h-6"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
              xmlns="http://www.w3.org/2000/svg"
            >
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
            </svg>
          </button>
        </div>
        <ul className="flex flex-col p-4 space-y-2">
          {navLinks.map(({ href, label, icon }) => (
            <li key={href}>
              <Link
                href={href}
                className="flex items-center px-4 py-3 rounded-lg hover:bg-gray-700 hover:text-orange-400 transition-colors group"
                onClick={() => setIsSidebarOpen(false)}
              >
                <svg
                  className="w-5 h-5 mr-3 text-gray-400 group-hover:text-orange-400 transition-colors"
                  fill="none"
                  stroke="currentColor"
                  viewBox="0 0 24 24"
                  xmlns="http://www.w3.org/2000/svg"
                >
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d={icon} />
                </svg>
                <span>{label}</span>
              </Link>
            </li>
          ))}
        </ul>
      </nav>
    </>
  );
};

export default Sidebar;

// чтобы подтвердить организатьолра, прикреплять файлик 1 (на клиенте есть интерфейс)

//мои встречи нужно сортировать активные по дате 1(есть такое)

// вкладка посещённые(тоже присутствует) 1

// место проведления словами адрес 1(нужно яндекс api подключить)
 
//две даты на мероприятие 

// соавторство

//отмена подписки на мероприятие 1

//дата окончания  1(ну вроде есть) 

//бронь места

//тэги

//фильтры тегов

// табличка организатора(кол-во посещенных)

//мероприятия друзей

// меню 1 (вроде есть)

// друзья 1

//уведомления

//ссылки 

// мероприятия организатора

// рейтинг мероприятия 

// черетжи: схема бд,  блок-схема создания меропрития, блок-схема приглашения друзей или/и добавления в друзья, блок-схема я иду на мероприятие

// плакаты: диаграмма вариантов использования, архитектура прилаги ,cкриншоты работы прилаги

// схема архитектуры: либы добавить списком
 